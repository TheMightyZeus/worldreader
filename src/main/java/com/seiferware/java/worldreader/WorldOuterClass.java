// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: World.proto
package com.seiferware.java.worldreader;

import com.google.protobuf.*;

public final class WorldOuterClass {
	private static final Descriptors.Descriptor internal_static_World_World_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_DoubleRow_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_BooleanRow_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_IntegerRow_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_ByteRow_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_DoubleMatrix_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_BooleanMatrix_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_IntegerMatrix_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_DoubleQuantile_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_DoubleMatrixWithQuantiles_descriptor;
	private static final Descriptors.Descriptor internal_static_World_World_GenerationData_descriptor;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_DoubleRow_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_BooleanRow_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_IntegerRow_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_ByteRow_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_DoubleMatrix_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_BooleanMatrix_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_IntegerMatrix_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_DoubleQuantile_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_DoubleMatrixWithQuantiles_fieldAccessorTable;
	private static GeneratedMessage.FieldAccessorTable internal_static_World_World_GenerationData_fieldAccessorTable;
	private static Descriptors.FileDescriptor descriptor;
	static {
		java.lang.String[] descriptorData = {
				"\n\013World.proto\022\005World\"\366\r\n\005World\022\027\n\017worlde" + "ngine_tag\030\001 \002(\005\022\033\n\023worldengine_version\030\002" + " \002(\005\022\014\n\004name\030\003 \002(\t\022\r\n\005width\030\004 \002(\005\022\016\n\006hei" + "ght\030\005 \002(\005\0220\n\rheightMapData\030\006 \002(\0132\031.World" + ".World.DoubleMatrix\022\027\n\017heightMapTh_sea\030\007" + " \002(\001\022\031\n\021heightMapTh_plain\030\010 \002(\001\022\030\n\020heigh" + "tMapTh_hill\030\t \002(\001\022*\n\006plates\030\n \002(\0132\032.Worl" + "d.World.IntegerMatrix\022)\n\005ocean\030\013 \002(\0132\032.W" + "orld.World.BooleanMatrix\022,\n\tsea_depth\030\014 " + "\002(\0132\031.World.World.DoubleMatrix\022)\n\005biome\030",
				"\r \001(\0132\032.World.World.IntegerMatrix\0228\n\010hum" + "idity\030\016 \001(\0132&.World.World.DoubleMatrixWi" + "thQuantiles\022-\n\nirrigation\030\017 \001(\0132\031.World." + "World.DoubleMatrix\0223\n\020permeabilityData\030\020" + " \001(\0132\031.World.World.DoubleMatrix\022\030\n\020perme" + "ability_low\030\021 \001(\001\022\030\n\020permeability_med\030\022 " + "\001(\001\022/\n\014watermapData\030\023 \001(\0132\031.World.World." + "DoubleMatrix\022\026\n\016watermap_creek\030\024 \001(\001\022\026\n\016" + "watermap_river\030\025 \001(\001\022\032\n\022watermap_mainriv" + "er\030\026 \001(\001\0224\n\021precipitationData\030\027 \001(\0132\031.Wo",
				"rld.World.DoubleMatrix\022\031\n\021precipitation_" + "low\030\030 \001(\001\022\031\n\021precipitation_med\030\031 \001(\001\0222\n\017" + "temperatureData\030\032 \001(\0132\031.World.World.Doub" + "leMatrix\022\031\n\021temperature_polar\030\033 \001(\001\022\032\n\022t" + "emperature_alpine\030\034 \001(\001\022\032\n\022temperature_b" + "oreal\030\035 \001(\001\022\030\n\020temperature_cool\030\036 \001(\001\022\030\n" + "\020temperature_warm\030\037 \001(\001\022\037\n\027temperature_s" + "ubtropical\030  \001(\001\0223\n\016generationData\030! \001(\013" + "2\033.World.World.GenerationData\022*\n\007lakemap" + "\030\" \001(\0132\031.World.World.DoubleMatrix\022+\n\010riv",
				"ermap\030# \001(\0132\031.World.World.DoubleMatrix\022)" + "\n\006icecap\030$ \001(\0132\031.World.World.DoubleMatri" + "x\032\032\n\tDoubleRow\022\r\n\005cells\030\001 \003(\001\032\033\n\nBoolean" + "Row\022\r\n\005cells\030\001 \003(\010\032\033\n\nIntegerRow\022\r\n\005cell" + "s\030\001 \003(\005\032\030\n\007ByteRow\022\r\n\005cells\030\001 \003(\005\0324\n\014Dou" + "bleMatrix\022$\n\004rows\030\001 \003(\0132\026.World.World.Do" + "ubleRow\0326\n\rBooleanMatrix\022%\n\004rows\030\001 \003(\0132\027" + ".World.World.BooleanRow\0326\n\rIntegerMatrix" + "\022%\n\004rows\030\001 \003(\0132\027.World.World.IntegerRow\032" + ",\n\016DoubleQuantile\022\013\n\003key\030\001 \002(\005\022\r\n\005value\030",
				"\002 \002(\001\032q\n\031DoubleMatrixWithQuantiles\022.\n\tqu" + "antiles\030\001 \003(\0132\033.World.World.DoubleQuanti" + "le\022$\n\004rows\030\002 \003(\0132\026.World.World.DoubleRow" + "\032S\n\016GenerationData\022\014\n\004seed\030\001 \001(\005\022\020\n\010n_pl" + "ates\030\002 \001(\005\022\023\n\013ocean_level\030\003 \001(\002\022\014\n\004step\030" + "\004 \001(\t"
		};
		Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
			public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root) {
				descriptor = root;
				return null;
			}
		};
		Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[]{
		}, assigner);
		internal_static_World_World_descriptor = getDescriptor().getMessageTypes().get(0);
		internal_static_World_World_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_descriptor, new java.lang.String[]{
				"WorldengineTag",
				"WorldengineVersion",
				"Name",
				"Width",
				"Height",
				"HeightMapData",
				"HeightMapThSea",
				"HeightMapThPlain",
				"HeightMapThHill",
				"Plates",
				"Ocean",
				"SeaDepth",
				"Biome",
				"Humidity",
				"Irrigation",
				"PermeabilityData",
				"PermeabilityLow",
				"PermeabilityMed",
				"WatermapData",
				"WatermapCreek",
				"WatermapRiver",
				"WatermapMainriver",
				"PrecipitationData",
				"PrecipitationLow",
				"PrecipitationMed",
				"TemperatureData",
				"TemperaturePolar",
				"TemperatureAlpine",
				"TemperatureBoreal",
				"TemperatureCool",
				"TemperatureWarm",
				"TemperatureSubtropical",
				"GenerationData",
				"Lakemap",
				"Rivermap",
				"Icecap",
				});
		internal_static_World_World_DoubleRow_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(0);
		internal_static_World_World_DoubleRow_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_DoubleRow_descriptor, new java.lang.String[]{
				"Cells",
				});
		internal_static_World_World_BooleanRow_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(1);
		internal_static_World_World_BooleanRow_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_BooleanRow_descriptor, new java.lang.String[]{
				"Cells",
				});
		internal_static_World_World_IntegerRow_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(2);
		internal_static_World_World_IntegerRow_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_IntegerRow_descriptor, new java.lang.String[]{
				"Cells",
				});
		internal_static_World_World_ByteRow_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(3);
		internal_static_World_World_ByteRow_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_ByteRow_descriptor, new java.lang.String[]{
				"Cells",
				});
		internal_static_World_World_DoubleMatrix_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(4);
		internal_static_World_World_DoubleMatrix_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_DoubleMatrix_descriptor, new java.lang.String[]{
				"Rows",
				});
		internal_static_World_World_BooleanMatrix_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(5);
		internal_static_World_World_BooleanMatrix_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_BooleanMatrix_descriptor, new java.lang.String[]{
				"Rows",
				});
		internal_static_World_World_IntegerMatrix_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(6);
		internal_static_World_World_IntegerMatrix_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_IntegerMatrix_descriptor, new java.lang.String[]{
				"Rows",
				});
		internal_static_World_World_DoubleQuantile_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(7);
		internal_static_World_World_DoubleQuantile_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_DoubleQuantile_descriptor, new java.lang.String[]{
				"Key", "Value",
				});
		internal_static_World_World_DoubleMatrixWithQuantiles_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(8);
		internal_static_World_World_DoubleMatrixWithQuantiles_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_DoubleMatrixWithQuantiles_descriptor, new java.lang.String[]{
				"Quantiles", "Rows",
				});
		internal_static_World_World_GenerationData_descriptor = internal_static_World_World_descriptor.getNestedTypes().get(9);
		internal_static_World_World_GenerationData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_World_World_GenerationData_descriptor, new java.lang.String[]{
				"Seed", "NPlates", "OceanLevel", "Step",
				});
	}
	private WorldOuterClass() {
	}
	public static Descriptors.FileDescriptor getDescriptor() {
		return descriptor;
	}
	public static void registerAllExtensions(ExtensionRegistry registry) {
	}
	public interface WorldOrBuilder extends
			// @@protoc_insertion_point(interface_extends:World.World)
			MessageOrBuilder {
		/**
		 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
		 * <p>
		 * <pre>
		 * Biome
		 * </pre>
		 */
		WorldOuterClass.World.IntegerMatrix getBiome();
		/**
		 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
		 * <p>
		 * <pre>
		 * Biome
		 * </pre>
		 */
		WorldOuterClass.World.IntegerMatrixOrBuilder getBiomeOrBuilder();
		/**
		 * <code>optional .World.World.GenerationData generationData = 33;</code>
		 * <p>
		 * <pre>
		 * Data about generation:
		 * introduced in v0.5.3
		 * this is optional for backward compatibility reasons
		 * </pre>
		 */
		WorldOuterClass.World.GenerationData getGenerationData();
		/**
		 * <code>optional .World.World.GenerationData generationData = 33;</code>
		 * <p>
		 * <pre>
		 * Data about generation:
		 * introduced in v0.5.3
		 * this is optional for backward compatibility reasons
		 * </pre>
		 */
		WorldOuterClass.World.GenerationDataOrBuilder getGenerationDataOrBuilder();
		/**
		 * <code>required int32 height = 5;</code>
		 */
		int getHeight();
		/**
		 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
		 * <p>
		 * <pre>
		 * Elevation
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrix getHeightMapData();
		/**
		 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
		 * <p>
		 * <pre>
		 * Elevation
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getHeightMapDataOrBuilder();
		/**
		 * <code>required double heightMapTh_hill = 9;</code>
		 */
		double getHeightMapThHill();
		/**
		 * <code>required double heightMapTh_plain = 8;</code>
		 */
		double getHeightMapThPlain();
		/**
		 * <code>required double heightMapTh_sea = 7;</code>
		 */
		double getHeightMapThSea();
		/**
		 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
		 * <p>
		 * <pre>
		 * Humidity
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixWithQuantiles getHumidity();
		/**
		 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
		 * <p>
		 * <pre>
		 * Humidity
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixWithQuantilesOrBuilder getHumidityOrBuilder();
		/**
		 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
		 * <p>
		 * <pre>
		 * Ice-caps
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrix getIcecap();
		/**
		 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
		 * <p>
		 * <pre>
		 * Ice-caps
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getIcecapOrBuilder();
		/**
		 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
		 * <p>
		 * <pre>
		 * Irrigation
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrix getIrrigation();
		/**
		 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
		 * <p>
		 * <pre>
		 * Irrigation
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getIrrigationOrBuilder();
		/**
		 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
		 */
		WorldOuterClass.World.DoubleMatrix getLakemap();
		/**
		 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getLakemapOrBuilder();
		/**
		 * <code>required string name = 3;</code>
		 */
		java.lang.String getName();
		/**
		 * <code>required string name = 3;</code>
		 */
		ByteString getNameBytes();
		/**
		 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
		 * <p>
		 * <pre>
		 * Ocean
		 * </pre>
		 */
		WorldOuterClass.World.BooleanMatrix getOcean();
		/**
		 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
		 * <p>
		 * <pre>
		 * Ocean
		 * </pre>
		 */
		WorldOuterClass.World.BooleanMatrixOrBuilder getOceanOrBuilder();
		/**
		 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
		 * <p>
		 * <pre>
		 * Permeability
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrix getPermeabilityData();
		/**
		 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
		 * <p>
		 * <pre>
		 * Permeability
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getPermeabilityDataOrBuilder();
		/**
		 * <code>optional double permeability_low = 17;</code>
		 */
		double getPermeabilityLow();
		/**
		 * <code>optional double permeability_med = 18;</code>
		 */
		double getPermeabilityMed();
		/**
		 * <code>required .World.World.IntegerMatrix plates = 10;</code>
		 * <p>
		 * <pre>
		 * Plates
		 * </pre>
		 */
		WorldOuterClass.World.IntegerMatrix getPlates();
		/**
		 * <code>required .World.World.IntegerMatrix plates = 10;</code>
		 * <p>
		 * <pre>
		 * Plates
		 * </pre>
		 */
		WorldOuterClass.World.IntegerMatrixOrBuilder getPlatesOrBuilder();
		/**
		 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
		 * <p>
		 * <pre>
		 * Precipitation
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrix getPrecipitationData();
		/**
		 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
		 * <p>
		 * <pre>
		 * Precipitation
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getPrecipitationDataOrBuilder();
		/**
		 * <code>optional double precipitation_low = 24;</code>
		 */
		double getPrecipitationLow();
		/**
		 * <code>optional double precipitation_med = 25;</code>
		 */
		double getPrecipitationMed();
		/**
		 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
		 */
		WorldOuterClass.World.DoubleMatrix getRivermap();
		/**
		 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getRivermapOrBuilder();
		/**
		 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
		 */
		WorldOuterClass.World.DoubleMatrix getSeaDepth();
		/**
		 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getSeaDepthOrBuilder();
		/**
		 * <code>optional double temperature_alpine = 28;</code>
		 */
		double getTemperatureAlpine();
		/**
		 * <code>optional double temperature_boreal = 29;</code>
		 */
		double getTemperatureBoreal();
		/**
		 * <code>optional double temperature_cool = 30;</code>
		 */
		double getTemperatureCool();
		/**
		 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
		 * <p>
		 * <pre>
		 * Temperature
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrix getTemperatureData();
		/**
		 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
		 * <p>
		 * <pre>
		 * Temperature
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getTemperatureDataOrBuilder();
		/**
		 * <code>optional double temperature_polar = 27;</code>
		 */
		double getTemperaturePolar();
		/**
		 * <code>optional double temperature_subtropical = 32;</code>
		 */
		double getTemperatureSubtropical();
		/**
		 * <code>optional double temperature_warm = 31;</code>
		 */
		double getTemperatureWarm();
		/**
		 * <code>optional double watermap_creek = 20;</code>
		 */
		double getWatermapCreek();
		/**
		 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
		 * <p>
		 * <pre>
		 * Watermap
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrix getWatermapData();
		/**
		 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
		 * <p>
		 * <pre>
		 * Watermap
		 * </pre>
		 */
		WorldOuterClass.World.DoubleMatrixOrBuilder getWatermapDataOrBuilder();
		/**
		 * <code>optional double watermap_mainriver = 22;</code>
		 */
		double getWatermapMainriver();
		/**
		 * <code>optional double watermap_river = 21;</code>
		 */
		double getWatermapRiver();
		/**
		 * <code>required int32 width = 4;</code>
		 */
		int getWidth();
		/**
		 * <code>required int32 worldengine_tag = 1;</code>
		 * <p>
		 * <pre>
		 * these two fields have been introduced in Worldengine 0.18.0
		 * </pre>
		 */
		int getWorldengineTag();
		/**
		 * <code>required int32 worldengine_version = 2;</code>
		 */
		int getWorldengineVersion();
		/**
		 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
		 * <p>
		 * <pre>
		 * Biome
		 * </pre>
		 */
		boolean hasBiome();
		/**
		 * <code>optional .World.World.GenerationData generationData = 33;</code>
		 * <p>
		 * <pre>
		 * Data about generation:
		 * introduced in v0.5.3
		 * this is optional for backward compatibility reasons
		 * </pre>
		 */
		boolean hasGenerationData();
		/**
		 * <code>required int32 height = 5;</code>
		 */
		boolean hasHeight();
		/**
		 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
		 * <p>
		 * <pre>
		 * Elevation
		 * </pre>
		 */
		boolean hasHeightMapData();
		/**
		 * <code>required double heightMapTh_hill = 9;</code>
		 */
		boolean hasHeightMapThHill();
		/**
		 * <code>required double heightMapTh_plain = 8;</code>
		 */
		boolean hasHeightMapThPlain();
		/**
		 * <code>required double heightMapTh_sea = 7;</code>
		 */
		boolean hasHeightMapThSea();
		/**
		 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
		 * <p>
		 * <pre>
		 * Humidity
		 * </pre>
		 */
		boolean hasHumidity();
		/**
		 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
		 * <p>
		 * <pre>
		 * Ice-caps
		 * </pre>
		 */
		boolean hasIcecap();
		/**
		 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
		 * <p>
		 * <pre>
		 * Irrigation
		 * </pre>
		 */
		boolean hasIrrigation();
		/**
		 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
		 */
		boolean hasLakemap();
		/**
		 * <code>required string name = 3;</code>
		 */
		boolean hasName();
		/**
		 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
		 * <p>
		 * <pre>
		 * Ocean
		 * </pre>
		 */
		boolean hasOcean();
		/**
		 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
		 * <p>
		 * <pre>
		 * Permeability
		 * </pre>
		 */
		boolean hasPermeabilityData();
		/**
		 * <code>optional double permeability_low = 17;</code>
		 */
		boolean hasPermeabilityLow();
		/**
		 * <code>optional double permeability_med = 18;</code>
		 */
		boolean hasPermeabilityMed();
		/**
		 * <code>required .World.World.IntegerMatrix plates = 10;</code>
		 * <p>
		 * <pre>
		 * Plates
		 * </pre>
		 */
		boolean hasPlates();
		/**
		 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
		 * <p>
		 * <pre>
		 * Precipitation
		 * </pre>
		 */
		boolean hasPrecipitationData();
		/**
		 * <code>optional double precipitation_low = 24;</code>
		 */
		boolean hasPrecipitationLow();
		/**
		 * <code>optional double precipitation_med = 25;</code>
		 */
		boolean hasPrecipitationMed();
		/**
		 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
		 */
		boolean hasRivermap();
		/**
		 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
		 */
		boolean hasSeaDepth();
		/**
		 * <code>optional double temperature_alpine = 28;</code>
		 */
		boolean hasTemperatureAlpine();
		/**
		 * <code>optional double temperature_boreal = 29;</code>
		 */
		boolean hasTemperatureBoreal();
		/**
		 * <code>optional double temperature_cool = 30;</code>
		 */
		boolean hasTemperatureCool();
		/**
		 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
		 * <p>
		 * <pre>
		 * Temperature
		 * </pre>
		 */
		boolean hasTemperatureData();
		/**
		 * <code>optional double temperature_polar = 27;</code>
		 */
		boolean hasTemperaturePolar();
		/**
		 * <code>optional double temperature_subtropical = 32;</code>
		 */
		boolean hasTemperatureSubtropical();
		/**
		 * <code>optional double temperature_warm = 31;</code>
		 */
		boolean hasTemperatureWarm();
		/**
		 * <code>optional double watermap_creek = 20;</code>
		 */
		boolean hasWatermapCreek();
		/**
		 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
		 * <p>
		 * <pre>
		 * Watermap
		 * </pre>
		 */
		boolean hasWatermapData();
		/**
		 * <code>optional double watermap_mainriver = 22;</code>
		 */
		boolean hasWatermapMainriver();
		/**
		 * <code>optional double watermap_river = 21;</code>
		 */
		boolean hasWatermapRiver();
		/**
		 * <code>required int32 width = 4;</code>
		 */
		boolean hasWidth();
		/**
		 * <code>required int32 worldengine_tag = 1;</code>
		 * <p>
		 * <pre>
		 * these two fields have been introduced in Worldengine 0.18.0
		 * </pre>
		 */
		boolean hasWorldengineTag();
		/**
		 * <code>required int32 worldengine_version = 2;</code>
		 */
		boolean hasWorldengineVersion();
	}
	
	/**
	 * Protobuf type {@code World.World}
	 */
	public static final class World extends GeneratedMessage implements
			// @@protoc_insertion_point(message_implements:World.World)
			WorldOrBuilder {
		public static final int WORLDENGINE_TAG_FIELD_NUMBER = 1;
		public static final int WORLDENGINE_VERSION_FIELD_NUMBER = 2;
		public static final int NAME_FIELD_NUMBER = 3;
		public static final int WIDTH_FIELD_NUMBER = 4;
		public static final int HEIGHT_FIELD_NUMBER = 5;
		public static final int HEIGHTMAPDATA_FIELD_NUMBER = 6;
		public static final int HEIGHTMAPTH_SEA_FIELD_NUMBER = 7;
		public static final int HEIGHTMAPTH_PLAIN_FIELD_NUMBER = 8;
		public static final int HEIGHTMAPTH_HILL_FIELD_NUMBER = 9;
		public static final int PLATES_FIELD_NUMBER = 10;
		public static final int OCEAN_FIELD_NUMBER = 11;
		public static final int SEA_DEPTH_FIELD_NUMBER = 12;
		public static final int BIOME_FIELD_NUMBER = 13;
		public static final int HUMIDITY_FIELD_NUMBER = 14;
		public static final int IRRIGATION_FIELD_NUMBER = 15;
		public static final int PERMEABILITYDATA_FIELD_NUMBER = 16;
		public static final int PERMEABILITY_LOW_FIELD_NUMBER = 17;
		public static final int PERMEABILITY_MED_FIELD_NUMBER = 18;
		public static final int WATERMAPDATA_FIELD_NUMBER = 19;
		public static final int WATERMAP_CREEK_FIELD_NUMBER = 20;
		public static final int WATERMAP_RIVER_FIELD_NUMBER = 21;
		public static final int WATERMAP_MAINRIVER_FIELD_NUMBER = 22;
		public static final int PRECIPITATIONDATA_FIELD_NUMBER = 23;
		public static final int PRECIPITATION_LOW_FIELD_NUMBER = 24;
		public static final int PRECIPITATION_MED_FIELD_NUMBER = 25;
		public static final int TEMPERATUREDATA_FIELD_NUMBER = 26;
		public static final int TEMPERATURE_POLAR_FIELD_NUMBER = 27;
		public static final int TEMPERATURE_ALPINE_FIELD_NUMBER = 28;
		public static final int TEMPERATURE_BOREAL_FIELD_NUMBER = 29;
		public static final int TEMPERATURE_COOL_FIELD_NUMBER = 30;
		public static final int TEMPERATURE_WARM_FIELD_NUMBER = 31;
		public static final int TEMPERATURE_SUBTROPICAL_FIELD_NUMBER = 32;
		public static final int GENERATIONDATA_FIELD_NUMBER = 33;
		public static final int LAKEMAP_FIELD_NUMBER = 34;
		public static final int RIVERMAP_FIELD_NUMBER = 35;
		public static final int ICECAP_FIELD_NUMBER = 36;
		private static final World defaultInstance;
		private static final long serialVersionUID = 0L;
		public static Parser<World> PARSER = new AbstractParser<World>() {
			public World parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return new World(input, extensionRegistry);
			}
		};
		static {
			defaultInstance = new World(true);
			defaultInstance.initFields();
		}
		private final UnknownFieldSet unknownFields;
		private int bitField0_;
		private int bitField1_;
		private int worldengineTag_;
		private int worldengineVersion_;
		private java.lang.Object name_;
		private int width_;
		private int height_;
		private WorldOuterClass.World.DoubleMatrix heightMapData_;
		private double heightMapThSea_;
		private double heightMapThPlain_;
		private double heightMapThHill_;
		private WorldOuterClass.World.IntegerMatrix plates_;
		private WorldOuterClass.World.BooleanMatrix ocean_;
		private WorldOuterClass.World.DoubleMatrix seaDepth_;
		private WorldOuterClass.World.IntegerMatrix biome_;
		private WorldOuterClass.World.DoubleMatrixWithQuantiles humidity_;
		private WorldOuterClass.World.DoubleMatrix irrigation_;
		private WorldOuterClass.World.DoubleMatrix permeabilityData_;
		private double permeabilityLow_;
		private double permeabilityMed_;
		private WorldOuterClass.World.DoubleMatrix watermapData_;
		private double watermapCreek_;
		private double watermapRiver_;
		private double watermapMainriver_;
		private WorldOuterClass.World.DoubleMatrix precipitationData_;
		private double precipitationLow_;
		private double precipitationMed_;
		private WorldOuterClass.World.DoubleMatrix temperatureData_;
		private double temperaturePolar_;
		private double temperatureAlpine_;
		private double temperatureBoreal_;
		private double temperatureCool_;
		private double temperatureWarm_;
		private double temperatureSubtropical_;
		private WorldOuterClass.World.GenerationData generationData_;
		private WorldOuterClass.World.DoubleMatrix lakemap_;
		private WorldOuterClass.World.DoubleMatrix rivermap_;
		private WorldOuterClass.World.DoubleMatrix icecap_;
		private byte memoizedIsInitialized = -1;
		private int memoizedSerializedSize = -1;
		// Use World.newBuilder() to construct.
		private World(GeneratedMessage.Builder<?> builder) {
			super(builder);
			this.unknownFields = builder.getUnknownFields();
		}
		private World(boolean noInit) {
			this.unknownFields = UnknownFieldSet.getDefaultInstance();
		}
		private World(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
			initFields();
			int mutable_bitField0_ = 0;
			int mutable_bitField1_ = 0;
			UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
			try {
				boolean done = false;
				while(!done) {
					int tag = input.readTag();
					switch(tag) {
						case 0:
							done = true;
							break;
						default: {
							if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
								done = true;
							}
							break;
						}
						case 8: {
							bitField0_ |= 0x00000001;
							worldengineTag_ = input.readInt32();
							break;
						}
						case 16: {
							bitField0_ |= 0x00000002;
							worldengineVersion_ = input.readInt32();
							break;
						}
						case 26: {
							ByteString bs = input.readBytes();
							bitField0_ |= 0x00000004;
							name_ = bs;
							break;
						}
						case 32: {
							bitField0_ |= 0x00000008;
							width_ = input.readInt32();
							break;
						}
						case 40: {
							bitField0_ |= 0x00000010;
							height_ = input.readInt32();
							break;
						}
						case 50: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00000020) == 0x00000020)) {
								subBuilder = heightMapData_.toBuilder();
							}
							heightMapData_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(heightMapData_);
								heightMapData_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00000020;
							break;
						}
						case 57: {
							bitField0_ |= 0x00000040;
							heightMapThSea_ = input.readDouble();
							break;
						}
						case 65: {
							bitField0_ |= 0x00000080;
							heightMapThPlain_ = input.readDouble();
							break;
						}
						case 73: {
							bitField0_ |= 0x00000100;
							heightMapThHill_ = input.readDouble();
							break;
						}
						case 82: {
							WorldOuterClass.World.IntegerMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00000200) == 0x00000200)) {
								subBuilder = plates_.toBuilder();
							}
							plates_ = input.readMessage(WorldOuterClass.World.IntegerMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(plates_);
								plates_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00000200;
							break;
						}
						case 90: {
							WorldOuterClass.World.BooleanMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00000400) == 0x00000400)) {
								subBuilder = ocean_.toBuilder();
							}
							ocean_ = input.readMessage(WorldOuterClass.World.BooleanMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(ocean_);
								ocean_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00000400;
							break;
						}
						case 98: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00000800) == 0x00000800)) {
								subBuilder = seaDepth_.toBuilder();
							}
							seaDepth_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(seaDepth_);
								seaDepth_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00000800;
							break;
						}
						case 106: {
							WorldOuterClass.World.IntegerMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00001000) == 0x00001000)) {
								subBuilder = biome_.toBuilder();
							}
							biome_ = input.readMessage(WorldOuterClass.World.IntegerMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(biome_);
								biome_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00001000;
							break;
						}
						case 114: {
							WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder subBuilder = null;
							if(((bitField0_ & 0x00002000) == 0x00002000)) {
								subBuilder = humidity_.toBuilder();
							}
							humidity_ = input.readMessage(WorldOuterClass.World.DoubleMatrixWithQuantiles.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(humidity_);
								humidity_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00002000;
							break;
						}
						case 122: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00004000) == 0x00004000)) {
								subBuilder = irrigation_.toBuilder();
							}
							irrigation_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(irrigation_);
								irrigation_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00004000;
							break;
						}
						case 130: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00008000) == 0x00008000)) {
								subBuilder = permeabilityData_.toBuilder();
							}
							permeabilityData_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(permeabilityData_);
								permeabilityData_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00008000;
							break;
						}
						case 137: {
							bitField0_ |= 0x00010000;
							permeabilityLow_ = input.readDouble();
							break;
						}
						case 145: {
							bitField0_ |= 0x00020000;
							permeabilityMed_ = input.readDouble();
							break;
						}
						case 154: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00040000) == 0x00040000)) {
								subBuilder = watermapData_.toBuilder();
							}
							watermapData_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(watermapData_);
								watermapData_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00040000;
							break;
						}
						case 161: {
							bitField0_ |= 0x00080000;
							watermapCreek_ = input.readDouble();
							break;
						}
						case 169: {
							bitField0_ |= 0x00100000;
							watermapRiver_ = input.readDouble();
							break;
						}
						case 177: {
							bitField0_ |= 0x00200000;
							watermapMainriver_ = input.readDouble();
							break;
						}
						case 186: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x00400000) == 0x00400000)) {
								subBuilder = precipitationData_.toBuilder();
							}
							precipitationData_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(precipitationData_);
								precipitationData_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x00400000;
							break;
						}
						case 193: {
							bitField0_ |= 0x00800000;
							precipitationLow_ = input.readDouble();
							break;
						}
						case 201: {
							bitField0_ |= 0x01000000;
							precipitationMed_ = input.readDouble();
							break;
						}
						case 210: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField0_ & 0x02000000) == 0x02000000)) {
								subBuilder = temperatureData_.toBuilder();
							}
							temperatureData_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(temperatureData_);
								temperatureData_ = subBuilder.buildPartial();
							}
							bitField0_ |= 0x02000000;
							break;
						}
						case 217: {
							bitField0_ |= 0x04000000;
							temperaturePolar_ = input.readDouble();
							break;
						}
						case 225: {
							bitField0_ |= 0x08000000;
							temperatureAlpine_ = input.readDouble();
							break;
						}
						case 233: {
							bitField0_ |= 0x10000000;
							temperatureBoreal_ = input.readDouble();
							break;
						}
						case 241: {
							bitField0_ |= 0x20000000;
							temperatureCool_ = input.readDouble();
							break;
						}
						case 249: {
							bitField0_ |= 0x40000000;
							temperatureWarm_ = input.readDouble();
							break;
						}
						case 257: {
							bitField0_ |= 0x80000000;
							temperatureSubtropical_ = input.readDouble();
							break;
						}
						case 266: {
							WorldOuterClass.World.GenerationData.Builder subBuilder = null;
							if(((bitField1_ & 0x00000001) == 0x00000001)) {
								subBuilder = generationData_.toBuilder();
							}
							generationData_ = input.readMessage(WorldOuterClass.World.GenerationData.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(generationData_);
								generationData_ = subBuilder.buildPartial();
							}
							bitField1_ |= 0x00000001;
							break;
						}
						case 274: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField1_ & 0x00000002) == 0x00000002)) {
								subBuilder = lakemap_.toBuilder();
							}
							lakemap_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(lakemap_);
								lakemap_ = subBuilder.buildPartial();
							}
							bitField1_ |= 0x00000002;
							break;
						}
						case 282: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField1_ & 0x00000004) == 0x00000004)) {
								subBuilder = rivermap_.toBuilder();
							}
							rivermap_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(rivermap_);
								rivermap_ = subBuilder.buildPartial();
							}
							bitField1_ |= 0x00000004;
							break;
						}
						case 290: {
							WorldOuterClass.World.DoubleMatrix.Builder subBuilder = null;
							if(((bitField1_ & 0x00000008) == 0x00000008)) {
								subBuilder = icecap_.toBuilder();
							}
							icecap_ = input.readMessage(WorldOuterClass.World.DoubleMatrix.PARSER, extensionRegistry);
							if(subBuilder != null) {
								subBuilder.mergeFrom(icecap_);
								icecap_ = subBuilder.buildPartial();
							}
							bitField1_ |= 0x00000008;
							break;
						}
					}
				}
			} catch (InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(this);
			} catch (java.io.IOException e) {
				throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
			} finally {
				this.unknownFields = unknownFields.build();
				makeExtensionsImmutable();
			}
		}
		public static World getDefaultInstance() {
			return defaultInstance;
		}
		public static final Descriptors.Descriptor getDescriptor() {
			return WorldOuterClass.internal_static_World_World_descriptor;
		}
		public static Builder newBuilder() {
			return Builder.create();
		}
		public static Builder newBuilder(WorldOuterClass.World prototype) {
			return newBuilder().mergeFrom(prototype);
		}
		public static WorldOuterClass.World parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
			return PARSER.parseDelimitedFrom(input);
		}
		public static WorldOuterClass.World parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
			return PARSER.parseDelimitedFrom(input, extensionRegistry);
		}
		public static WorldOuterClass.World parseFrom(ByteString data) throws InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}
		public static WorldOuterClass.World parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}
		public static WorldOuterClass.World parseFrom(byte[] data) throws InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}
		public static WorldOuterClass.World parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}
		public static WorldOuterClass.World parseFrom(java.io.InputStream input) throws java.io.IOException {
			return PARSER.parseFrom(input);
		}
		public static WorldOuterClass.World parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
			return PARSER.parseFrom(input, extensionRegistry);
		}
		public static WorldOuterClass.World parseFrom(CodedInputStream input) throws java.io.IOException {
			return PARSER.parseFrom(input);
		}
		public static WorldOuterClass.World parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
			return PARSER.parseFrom(input, extensionRegistry);
		}
		/**
		 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
		 * <p>
		 * <pre>
		 * Biome
		 * </pre>
		 */
		public WorldOuterClass.World.IntegerMatrix getBiome() {
			return biome_;
		}
		/**
		 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
		 * <p>
		 * <pre>
		 * Biome
		 * </pre>
		 */
		public WorldOuterClass.World.IntegerMatrixOrBuilder getBiomeOrBuilder() {
			return biome_;
		}
		public World getDefaultInstanceForType() {
			return defaultInstance;
		}
		/**
		 * <code>optional .World.World.GenerationData generationData = 33;</code>
		 * <p>
		 * <pre>
		 * Data about generation:
		 * introduced in v0.5.3
		 * this is optional for backward compatibility reasons
		 * </pre>
		 */
		public WorldOuterClass.World.GenerationData getGenerationData() {
			return generationData_;
		}
		/**
		 * <code>optional .World.World.GenerationData generationData = 33;</code>
		 * <p>
		 * <pre>
		 * Data about generation:
		 * introduced in v0.5.3
		 * this is optional for backward compatibility reasons
		 * </pre>
		 */
		public WorldOuterClass.World.GenerationDataOrBuilder getGenerationDataOrBuilder() {
			return generationData_;
		}
		/**
		 * <code>required int32 height = 5;</code>
		 */
		public int getHeight() {
			return height_;
		}
		/**
		 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
		 * <p>
		 * <pre>
		 * Elevation
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrix getHeightMapData() {
			return heightMapData_;
		}
		/**
		 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
		 * <p>
		 * <pre>
		 * Elevation
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getHeightMapDataOrBuilder() {
			return heightMapData_;
		}
		/**
		 * <code>required double heightMapTh_hill = 9;</code>
		 */
		public double getHeightMapThHill() {
			return heightMapThHill_;
		}
		/**
		 * <code>required double heightMapTh_plain = 8;</code>
		 */
		public double getHeightMapThPlain() {
			return heightMapThPlain_;
		}
		/**
		 * <code>required double heightMapTh_sea = 7;</code>
		 */
		public double getHeightMapThSea() {
			return heightMapThSea_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
		 * <p>
		 * <pre>
		 * Humidity
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixWithQuantiles getHumidity() {
			return humidity_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
		 * <p>
		 * <pre>
		 * Humidity
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixWithQuantilesOrBuilder getHumidityOrBuilder() {
			return humidity_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
		 * <p>
		 * <pre>
		 * Ice-caps
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrix getIcecap() {
			return icecap_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
		 * <p>
		 * <pre>
		 * Ice-caps
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getIcecapOrBuilder() {
			return icecap_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
		 * <p>
		 * <pre>
		 * Irrigation
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrix getIrrigation() {
			return irrigation_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
		 * <p>
		 * <pre>
		 * Irrigation
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getIrrigationOrBuilder() {
			return irrigation_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
		 */
		public WorldOuterClass.World.DoubleMatrix getLakemap() {
			return lakemap_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getLakemapOrBuilder() {
			return lakemap_;
		}
		/**
		 * <code>required string name = 3;</code>
		 */
		public java.lang.String getName() {
			java.lang.Object ref = name_;
			if(ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				ByteString bs = (ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				if(bs.isValidUtf8()) {
					name_ = s;
				}
				return s;
			}
		}
		/**
		 * <code>required string name = 3;</code>
		 */
		public ByteString getNameBytes() {
			java.lang.Object ref = name_;
			if(ref instanceof java.lang.String) {
				ByteString b = ByteString.copyFromUtf8((java.lang.String) ref);
				name_ = b;
				return b;
			} else {
				return (ByteString) ref;
			}
		}
		/**
		 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
		 * <p>
		 * <pre>
		 * Ocean
		 * </pre>
		 */
		public WorldOuterClass.World.BooleanMatrix getOcean() {
			return ocean_;
		}
		/**
		 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
		 * <p>
		 * <pre>
		 * Ocean
		 * </pre>
		 */
		public WorldOuterClass.World.BooleanMatrixOrBuilder getOceanOrBuilder() {
			return ocean_;
		}
		@java.lang.Override
		public Parser<World> getParserForType() {
			return PARSER;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
		 * <p>
		 * <pre>
		 * Permeability
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrix getPermeabilityData() {
			return permeabilityData_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
		 * <p>
		 * <pre>
		 * Permeability
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getPermeabilityDataOrBuilder() {
			return permeabilityData_;
		}
		/**
		 * <code>optional double permeability_low = 17;</code>
		 */
		public double getPermeabilityLow() {
			return permeabilityLow_;
		}
		/**
		 * <code>optional double permeability_med = 18;</code>
		 */
		public double getPermeabilityMed() {
			return permeabilityMed_;
		}
		/**
		 * <code>required .World.World.IntegerMatrix plates = 10;</code>
		 * <p>
		 * <pre>
		 * Plates
		 * </pre>
		 */
		public WorldOuterClass.World.IntegerMatrix getPlates() {
			return plates_;
		}
		/**
		 * <code>required .World.World.IntegerMatrix plates = 10;</code>
		 * <p>
		 * <pre>
		 * Plates
		 * </pre>
		 */
		public WorldOuterClass.World.IntegerMatrixOrBuilder getPlatesOrBuilder() {
			return plates_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
		 * <p>
		 * <pre>
		 * Precipitation
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrix getPrecipitationData() {
			return precipitationData_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
		 * <p>
		 * <pre>
		 * Precipitation
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getPrecipitationDataOrBuilder() {
			return precipitationData_;
		}
		/**
		 * <code>optional double precipitation_low = 24;</code>
		 */
		public double getPrecipitationLow() {
			return precipitationLow_;
		}
		/**
		 * <code>optional double precipitation_med = 25;</code>
		 */
		public double getPrecipitationMed() {
			return precipitationMed_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
		 */
		public WorldOuterClass.World.DoubleMatrix getRivermap() {
			return rivermap_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getRivermapOrBuilder() {
			return rivermap_;
		}
		/**
		 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
		 */
		public WorldOuterClass.World.DoubleMatrix getSeaDepth() {
			return seaDepth_;
		}
		/**
		 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getSeaDepthOrBuilder() {
			return seaDepth_;
		}
		public int getSerializedSize() {
			int size = memoizedSerializedSize;
			if(size != -1) {
				return size;
			}
			
			size = 0;
			if(((bitField0_ & 0x00000001) == 0x00000001)) {
				size += CodedOutputStream.computeInt32Size(1, worldengineTag_);
			}
			if(((bitField0_ & 0x00000002) == 0x00000002)) {
				size += CodedOutputStream.computeInt32Size(2, worldengineVersion_);
			}
			if(((bitField0_ & 0x00000004) == 0x00000004)) {
				size += CodedOutputStream.computeBytesSize(3, getNameBytes());
			}
			if(((bitField0_ & 0x00000008) == 0x00000008)) {
				size += CodedOutputStream.computeInt32Size(4, width_);
			}
			if(((bitField0_ & 0x00000010) == 0x00000010)) {
				size += CodedOutputStream.computeInt32Size(5, height_);
			}
			if(((bitField0_ & 0x00000020) == 0x00000020)) {
				size += CodedOutputStream.computeMessageSize(6, heightMapData_);
			}
			if(((bitField0_ & 0x00000040) == 0x00000040)) {
				size += CodedOutputStream.computeDoubleSize(7, heightMapThSea_);
			}
			if(((bitField0_ & 0x00000080) == 0x00000080)) {
				size += CodedOutputStream.computeDoubleSize(8, heightMapThPlain_);
			}
			if(((bitField0_ & 0x00000100) == 0x00000100)) {
				size += CodedOutputStream.computeDoubleSize(9, heightMapThHill_);
			}
			if(((bitField0_ & 0x00000200) == 0x00000200)) {
				size += CodedOutputStream.computeMessageSize(10, plates_);
			}
			if(((bitField0_ & 0x00000400) == 0x00000400)) {
				size += CodedOutputStream.computeMessageSize(11, ocean_);
			}
			if(((bitField0_ & 0x00000800) == 0x00000800)) {
				size += CodedOutputStream.computeMessageSize(12, seaDepth_);
			}
			if(((bitField0_ & 0x00001000) == 0x00001000)) {
				size += CodedOutputStream.computeMessageSize(13, biome_);
			}
			if(((bitField0_ & 0x00002000) == 0x00002000)) {
				size += CodedOutputStream.computeMessageSize(14, humidity_);
			}
			if(((bitField0_ & 0x00004000) == 0x00004000)) {
				size += CodedOutputStream.computeMessageSize(15, irrigation_);
			}
			if(((bitField0_ & 0x00008000) == 0x00008000)) {
				size += CodedOutputStream.computeMessageSize(16, permeabilityData_);
			}
			if(((bitField0_ & 0x00010000) == 0x00010000)) {
				size += CodedOutputStream.computeDoubleSize(17, permeabilityLow_);
			}
			if(((bitField0_ & 0x00020000) == 0x00020000)) {
				size += CodedOutputStream.computeDoubleSize(18, permeabilityMed_);
			}
			if(((bitField0_ & 0x00040000) == 0x00040000)) {
				size += CodedOutputStream.computeMessageSize(19, watermapData_);
			}
			if(((bitField0_ & 0x00080000) == 0x00080000)) {
				size += CodedOutputStream.computeDoubleSize(20, watermapCreek_);
			}
			if(((bitField0_ & 0x00100000) == 0x00100000)) {
				size += CodedOutputStream.computeDoubleSize(21, watermapRiver_);
			}
			if(((bitField0_ & 0x00200000) == 0x00200000)) {
				size += CodedOutputStream.computeDoubleSize(22, watermapMainriver_);
			}
			if(((bitField0_ & 0x00400000) == 0x00400000)) {
				size += CodedOutputStream.computeMessageSize(23, precipitationData_);
			}
			if(((bitField0_ & 0x00800000) == 0x00800000)) {
				size += CodedOutputStream.computeDoubleSize(24, precipitationLow_);
			}
			if(((bitField0_ & 0x01000000) == 0x01000000)) {
				size += CodedOutputStream.computeDoubleSize(25, precipitationMed_);
			}
			if(((bitField0_ & 0x02000000) == 0x02000000)) {
				size += CodedOutputStream.computeMessageSize(26, temperatureData_);
			}
			if(((bitField0_ & 0x04000000) == 0x04000000)) {
				size += CodedOutputStream.computeDoubleSize(27, temperaturePolar_);
			}
			if(((bitField0_ & 0x08000000) == 0x08000000)) {
				size += CodedOutputStream.computeDoubleSize(28, temperatureAlpine_);
			}
			if(((bitField0_ & 0x10000000) == 0x10000000)) {
				size += CodedOutputStream.computeDoubleSize(29, temperatureBoreal_);
			}
			if(((bitField0_ & 0x20000000) == 0x20000000)) {
				size += CodedOutputStream.computeDoubleSize(30, temperatureCool_);
			}
			if(((bitField0_ & 0x40000000) == 0x40000000)) {
				size += CodedOutputStream.computeDoubleSize(31, temperatureWarm_);
			}
			if(((bitField0_ & 0x80000000) == 0x80000000)) {
				size += CodedOutputStream.computeDoubleSize(32, temperatureSubtropical_);
			}
			if(((bitField1_ & 0x00000001) == 0x00000001)) {
				size += CodedOutputStream.computeMessageSize(33, generationData_);
			}
			if(((bitField1_ & 0x00000002) == 0x00000002)) {
				size += CodedOutputStream.computeMessageSize(34, lakemap_);
			}
			if(((bitField1_ & 0x00000004) == 0x00000004)) {
				size += CodedOutputStream.computeMessageSize(35, rivermap_);
			}
			if(((bitField1_ & 0x00000008) == 0x00000008)) {
				size += CodedOutputStream.computeMessageSize(36, icecap_);
			}
			size += getUnknownFields().getSerializedSize();
			memoizedSerializedSize = size;
			return size;
		}
		/**
		 * <code>optional double temperature_alpine = 28;</code>
		 */
		public double getTemperatureAlpine() {
			return temperatureAlpine_;
		}
		/**
		 * <code>optional double temperature_boreal = 29;</code>
		 */
		public double getTemperatureBoreal() {
			return temperatureBoreal_;
		}
		/**
		 * <code>optional double temperature_cool = 30;</code>
		 */
		public double getTemperatureCool() {
			return temperatureCool_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
		 * <p>
		 * <pre>
		 * Temperature
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrix getTemperatureData() {
			return temperatureData_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
		 * <p>
		 * <pre>
		 * Temperature
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getTemperatureDataOrBuilder() {
			return temperatureData_;
		}
		/**
		 * <code>optional double temperature_polar = 27;</code>
		 */
		public double getTemperaturePolar() {
			return temperaturePolar_;
		}
		/**
		 * <code>optional double temperature_subtropical = 32;</code>
		 */
		public double getTemperatureSubtropical() {
			return temperatureSubtropical_;
		}
		/**
		 * <code>optional double temperature_warm = 31;</code>
		 */
		public double getTemperatureWarm() {
			return temperatureWarm_;
		}
		@java.lang.Override
		public final UnknownFieldSet getUnknownFields() {
			return this.unknownFields;
		}
		/**
		 * <code>optional double watermap_creek = 20;</code>
		 */
		public double getWatermapCreek() {
			return watermapCreek_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
		 * <p>
		 * <pre>
		 * Watermap
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrix getWatermapData() {
			return watermapData_;
		}
		/**
		 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
		 * <p>
		 * <pre>
		 * Watermap
		 * </pre>
		 */
		public WorldOuterClass.World.DoubleMatrixOrBuilder getWatermapDataOrBuilder() {
			return watermapData_;
		}
		/**
		 * <code>optional double watermap_mainriver = 22;</code>
		 */
		public double getWatermapMainriver() {
			return watermapMainriver_;
		}
		/**
		 * <code>optional double watermap_river = 21;</code>
		 */
		public double getWatermapRiver() {
			return watermapRiver_;
		}
		/**
		 * <code>required int32 width = 4;</code>
		 */
		public int getWidth() {
			return width_;
		}
		/**
		 * <code>required int32 worldengine_tag = 1;</code>
		 * <p>
		 * <pre>
		 * these two fields have been introduced in Worldengine 0.18.0
		 * </pre>
		 */
		public int getWorldengineTag() {
			return worldengineTag_;
		}
		/**
		 * <code>required int32 worldengine_version = 2;</code>
		 */
		public int getWorldengineVersion() {
			return worldengineVersion_;
		}
		/**
		 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
		 * <p>
		 * <pre>
		 * Biome
		 * </pre>
		 */
		public boolean hasBiome() {
			return ((bitField0_ & 0x00001000) == 0x00001000);
		}
		/**
		 * <code>optional .World.World.GenerationData generationData = 33;</code>
		 * <p>
		 * <pre>
		 * Data about generation:
		 * introduced in v0.5.3
		 * this is optional for backward compatibility reasons
		 * </pre>
		 */
		public boolean hasGenerationData() {
			return ((bitField1_ & 0x00000001) == 0x00000001);
		}
		/**
		 * <code>required int32 height = 5;</code>
		 */
		public boolean hasHeight() {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		/**
		 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
		 * <p>
		 * <pre>
		 * Elevation
		 * </pre>
		 */
		public boolean hasHeightMapData() {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		/**
		 * <code>required double heightMapTh_hill = 9;</code>
		 */
		public boolean hasHeightMapThHill() {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		}
		/**
		 * <code>required double heightMapTh_plain = 8;</code>
		 */
		public boolean hasHeightMapThPlain() {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		}
		/**
		 * <code>required double heightMapTh_sea = 7;</code>
		 */
		public boolean hasHeightMapThSea() {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		/**
		 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
		 * <p>
		 * <pre>
		 * Humidity
		 * </pre>
		 */
		public boolean hasHumidity() {
			return ((bitField0_ & 0x00002000) == 0x00002000);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
		 * <p>
		 * <pre>
		 * Ice-caps
		 * </pre>
		 */
		public boolean hasIcecap() {
			return ((bitField1_ & 0x00000008) == 0x00000008);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
		 * <p>
		 * <pre>
		 * Irrigation
		 * </pre>
		 */
		public boolean hasIrrigation() {
			return ((bitField0_ & 0x00004000) == 0x00004000);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
		 */
		public boolean hasLakemap() {
			return ((bitField1_ & 0x00000002) == 0x00000002);
		}
		/**
		 * <code>required string name = 3;</code>
		 */
		public boolean hasName() {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		/**
		 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
		 * <p>
		 * <pre>
		 * Ocean
		 * </pre>
		 */
		public boolean hasOcean() {
			return ((bitField0_ & 0x00000400) == 0x00000400);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
		 * <p>
		 * <pre>
		 * Permeability
		 * </pre>
		 */
		public boolean hasPermeabilityData() {
			return ((bitField0_ & 0x00008000) == 0x00008000);
		}
		/**
		 * <code>optional double permeability_low = 17;</code>
		 */
		public boolean hasPermeabilityLow() {
			return ((bitField0_ & 0x00010000) == 0x00010000);
		}
		/**
		 * <code>optional double permeability_med = 18;</code>
		 */
		public boolean hasPermeabilityMed() {
			return ((bitField0_ & 0x00020000) == 0x00020000);
		}
		/**
		 * <code>required .World.World.IntegerMatrix plates = 10;</code>
		 * <p>
		 * <pre>
		 * Plates
		 * </pre>
		 */
		public boolean hasPlates() {
			return ((bitField0_ & 0x00000200) == 0x00000200);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
		 * <p>
		 * <pre>
		 * Precipitation
		 * </pre>
		 */
		public boolean hasPrecipitationData() {
			return ((bitField0_ & 0x00400000) == 0x00400000);
		}
		/**
		 * <code>optional double precipitation_low = 24;</code>
		 */
		public boolean hasPrecipitationLow() {
			return ((bitField0_ & 0x00800000) == 0x00800000);
		}
		/**
		 * <code>optional double precipitation_med = 25;</code>
		 */
		public boolean hasPrecipitationMed() {
			return ((bitField0_ & 0x01000000) == 0x01000000);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
		 */
		public boolean hasRivermap() {
			return ((bitField1_ & 0x00000004) == 0x00000004);
		}
		/**
		 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
		 */
		public boolean hasSeaDepth() {
			return ((bitField0_ & 0x00000800) == 0x00000800);
		}
		/**
		 * <code>optional double temperature_alpine = 28;</code>
		 */
		public boolean hasTemperatureAlpine() {
			return ((bitField0_ & 0x08000000) == 0x08000000);
		}
		/**
		 * <code>optional double temperature_boreal = 29;</code>
		 */
		public boolean hasTemperatureBoreal() {
			return ((bitField0_ & 0x10000000) == 0x10000000);
		}
		/**
		 * <code>optional double temperature_cool = 30;</code>
		 */
		public boolean hasTemperatureCool() {
			return ((bitField0_ & 0x20000000) == 0x20000000);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
		 * <p>
		 * <pre>
		 * Temperature
		 * </pre>
		 */
		public boolean hasTemperatureData() {
			return ((bitField0_ & 0x02000000) == 0x02000000);
		}
		/**
		 * <code>optional double temperature_polar = 27;</code>
		 */
		public boolean hasTemperaturePolar() {
			return ((bitField0_ & 0x04000000) == 0x04000000);
		}
		/**
		 * <code>optional double temperature_subtropical = 32;</code>
		 */
		public boolean hasTemperatureSubtropical() {
			return ((bitField0_ & 0x80000000) == 0x80000000);
		}
		/**
		 * <code>optional double temperature_warm = 31;</code>
		 */
		public boolean hasTemperatureWarm() {
			return ((bitField0_ & 0x40000000) == 0x40000000);
		}
		/**
		 * <code>optional double watermap_creek = 20;</code>
		 */
		public boolean hasWatermapCreek() {
			return ((bitField0_ & 0x00080000) == 0x00080000);
		}
		/**
		 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
		 * <p>
		 * <pre>
		 * Watermap
		 * </pre>
		 */
		public boolean hasWatermapData() {
			return ((bitField0_ & 0x00040000) == 0x00040000);
		}
		/**
		 * <code>optional double watermap_mainriver = 22;</code>
		 */
		public boolean hasWatermapMainriver() {
			return ((bitField0_ & 0x00200000) == 0x00200000);
		}
		/**
		 * <code>optional double watermap_river = 21;</code>
		 */
		public boolean hasWatermapRiver() {
			return ((bitField0_ & 0x00100000) == 0x00100000);
		}
		/**
		 * <code>required int32 width = 4;</code>
		 */
		public boolean hasWidth() {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		/**
		 * <code>required int32 worldengine_tag = 1;</code>
		 * <p>
		 * <pre>
		 * these two fields have been introduced in Worldengine 0.18.0
		 * </pre>
		 */
		public boolean hasWorldengineTag() {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		/**
		 * <code>required int32 worldengine_version = 2;</code>
		 */
		public boolean hasWorldengineVersion() {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		private void initFields() {
			worldengineTag_ = 0;
			worldengineVersion_ = 0;
			name_ = "";
			width_ = 0;
			height_ = 0;
			heightMapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			heightMapThSea_ = 0D;
			heightMapThPlain_ = 0D;
			heightMapThHill_ = 0D;
			plates_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
			ocean_ = WorldOuterClass.World.BooleanMatrix.getDefaultInstance();
			seaDepth_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			biome_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
			humidity_ = WorldOuterClass.World.DoubleMatrixWithQuantiles.getDefaultInstance();
			irrigation_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			permeabilityData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			permeabilityLow_ = 0D;
			permeabilityMed_ = 0D;
			watermapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			watermapCreek_ = 0D;
			watermapRiver_ = 0D;
			watermapMainriver_ = 0D;
			precipitationData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			precipitationLow_ = 0D;
			precipitationMed_ = 0D;
			temperatureData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			temperaturePolar_ = 0D;
			temperatureAlpine_ = 0D;
			temperatureBoreal_ = 0D;
			temperatureCool_ = 0D;
			temperatureWarm_ = 0D;
			temperatureSubtropical_ = 0D;
			generationData_ = WorldOuterClass.World.GenerationData.getDefaultInstance();
			lakemap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			rivermap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			icecap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
		}
		protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
			return WorldOuterClass.internal_static_World_World_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.class, WorldOuterClass.World.Builder.class);
		}
		public final boolean isInitialized() {
			byte isInitialized = memoizedIsInitialized;
			if(isInitialized == 1) {
				return true;
			}
			if(isInitialized == 0) {
				return false;
			}
			
			if(!hasWorldengineTag()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasWorldengineVersion()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasName()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasWidth()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasHeight()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasHeightMapData()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasHeightMapThSea()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasHeightMapThPlain()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasHeightMapThHill()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasPlates()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasOcean()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(!hasSeaDepth()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if(hasHumidity()) {
				if(!getHumidity().isInitialized()) {
					memoizedIsInitialized = 0;
					return false;
				}
			}
			memoizedIsInitialized = 1;
			return true;
		}
		public Builder newBuilderForType() {
			return newBuilder();
		}
		@java.lang.Override
		protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
			Builder builder = new Builder(parent);
			return builder;
		}
		public Builder toBuilder() {
			return newBuilder(this);
		}
		@java.lang.Override
		protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
			return super.writeReplace();
		}
		public void writeTo(CodedOutputStream output) throws java.io.IOException {
			getSerializedSize();
			if(((bitField0_ & 0x00000001) == 0x00000001)) {
				output.writeInt32(1, worldengineTag_);
			}
			if(((bitField0_ & 0x00000002) == 0x00000002)) {
				output.writeInt32(2, worldengineVersion_);
			}
			if(((bitField0_ & 0x00000004) == 0x00000004)) {
				output.writeBytes(3, getNameBytes());
			}
			if(((bitField0_ & 0x00000008) == 0x00000008)) {
				output.writeInt32(4, width_);
			}
			if(((bitField0_ & 0x00000010) == 0x00000010)) {
				output.writeInt32(5, height_);
			}
			if(((bitField0_ & 0x00000020) == 0x00000020)) {
				output.writeMessage(6, heightMapData_);
			}
			if(((bitField0_ & 0x00000040) == 0x00000040)) {
				output.writeDouble(7, heightMapThSea_);
			}
			if(((bitField0_ & 0x00000080) == 0x00000080)) {
				output.writeDouble(8, heightMapThPlain_);
			}
			if(((bitField0_ & 0x00000100) == 0x00000100)) {
				output.writeDouble(9, heightMapThHill_);
			}
			if(((bitField0_ & 0x00000200) == 0x00000200)) {
				output.writeMessage(10, plates_);
			}
			if(((bitField0_ & 0x00000400) == 0x00000400)) {
				output.writeMessage(11, ocean_);
			}
			if(((bitField0_ & 0x00000800) == 0x00000800)) {
				output.writeMessage(12, seaDepth_);
			}
			if(((bitField0_ & 0x00001000) == 0x00001000)) {
				output.writeMessage(13, biome_);
			}
			if(((bitField0_ & 0x00002000) == 0x00002000)) {
				output.writeMessage(14, humidity_);
			}
			if(((bitField0_ & 0x00004000) == 0x00004000)) {
				output.writeMessage(15, irrigation_);
			}
			if(((bitField0_ & 0x00008000) == 0x00008000)) {
				output.writeMessage(16, permeabilityData_);
			}
			if(((bitField0_ & 0x00010000) == 0x00010000)) {
				output.writeDouble(17, permeabilityLow_);
			}
			if(((bitField0_ & 0x00020000) == 0x00020000)) {
				output.writeDouble(18, permeabilityMed_);
			}
			if(((bitField0_ & 0x00040000) == 0x00040000)) {
				output.writeMessage(19, watermapData_);
			}
			if(((bitField0_ & 0x00080000) == 0x00080000)) {
				output.writeDouble(20, watermapCreek_);
			}
			if(((bitField0_ & 0x00100000) == 0x00100000)) {
				output.writeDouble(21, watermapRiver_);
			}
			if(((bitField0_ & 0x00200000) == 0x00200000)) {
				output.writeDouble(22, watermapMainriver_);
			}
			if(((bitField0_ & 0x00400000) == 0x00400000)) {
				output.writeMessage(23, precipitationData_);
			}
			if(((bitField0_ & 0x00800000) == 0x00800000)) {
				output.writeDouble(24, precipitationLow_);
			}
			if(((bitField0_ & 0x01000000) == 0x01000000)) {
				output.writeDouble(25, precipitationMed_);
			}
			if(((bitField0_ & 0x02000000) == 0x02000000)) {
				output.writeMessage(26, temperatureData_);
			}
			if(((bitField0_ & 0x04000000) == 0x04000000)) {
				output.writeDouble(27, temperaturePolar_);
			}
			if(((bitField0_ & 0x08000000) == 0x08000000)) {
				output.writeDouble(28, temperatureAlpine_);
			}
			if(((bitField0_ & 0x10000000) == 0x10000000)) {
				output.writeDouble(29, temperatureBoreal_);
			}
			if(((bitField0_ & 0x20000000) == 0x20000000)) {
				output.writeDouble(30, temperatureCool_);
			}
			if(((bitField0_ & 0x40000000) == 0x40000000)) {
				output.writeDouble(31, temperatureWarm_);
			}
			if(((bitField0_ & 0x80000000) == 0x80000000)) {
				output.writeDouble(32, temperatureSubtropical_);
			}
			if(((bitField1_ & 0x00000001) == 0x00000001)) {
				output.writeMessage(33, generationData_);
			}
			if(((bitField1_ & 0x00000002) == 0x00000002)) {
				output.writeMessage(34, lakemap_);
			}
			if(((bitField1_ & 0x00000004) == 0x00000004)) {
				output.writeMessage(35, rivermap_);
			}
			if(((bitField1_ & 0x00000008) == 0x00000008)) {
				output.writeMessage(36, icecap_);
			}
			getUnknownFields().writeTo(output);
		}
		public interface BooleanMatrixOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.BooleanMatrix)
				MessageOrBuilder {
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			WorldOuterClass.World.BooleanRow getRows(int index);
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			int getRowsCount();
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			java.util.List<WorldOuterClass.World.BooleanRow> getRowsList();
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			WorldOuterClass.World.BooleanRowOrBuilder getRowsOrBuilder(int index);
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			java.util.List<? extends WorldOuterClass.World.BooleanRowOrBuilder> getRowsOrBuilderList();
		}
		
		public interface BooleanRowOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.BooleanRow)
				MessageOrBuilder {
			/**
			 * <code>repeated bool cells = 1;</code>
			 */
			boolean getCells(int index);
			/**
			 * <code>repeated bool cells = 1;</code>
			 */
			int getCellsCount();
			/**
			 * <code>repeated bool cells = 1;</code>
			 */
			java.util.List<java.lang.Boolean> getCellsList();
		}
		
		public interface ByteRowOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.ByteRow)
				MessageOrBuilder {
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			int getCells(int index);
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			int getCellsCount();
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			java.util.List<java.lang.Integer> getCellsList();
		}
		
		public interface DoubleMatrixOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.DoubleMatrix)
				MessageOrBuilder {
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			WorldOuterClass.World.DoubleRow getRows(int index);
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			int getRowsCount();
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			java.util.List<WorldOuterClass.World.DoubleRow> getRowsList();
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			WorldOuterClass.World.DoubleRowOrBuilder getRowsOrBuilder(int index);
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			java.util.List<? extends WorldOuterClass.World.DoubleRowOrBuilder> getRowsOrBuilderList();
		}
		
		public interface DoubleMatrixWithQuantilesOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.DoubleMatrixWithQuantiles)
				MessageOrBuilder {
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			WorldOuterClass.World.DoubleQuantile getQuantiles(int index);
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			int getQuantilesCount();
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			java.util.List<WorldOuterClass.World.DoubleQuantile> getQuantilesList();
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			WorldOuterClass.World.DoubleQuantileOrBuilder getQuantilesOrBuilder(int index);
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			java.util.List<? extends WorldOuterClass.World.DoubleQuantileOrBuilder> getQuantilesOrBuilderList();
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			WorldOuterClass.World.DoubleRow getRows(int index);
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			int getRowsCount();
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			java.util.List<WorldOuterClass.World.DoubleRow> getRowsList();
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			WorldOuterClass.World.DoubleRowOrBuilder getRowsOrBuilder(int index);
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			java.util.List<? extends WorldOuterClass.World.DoubleRowOrBuilder> getRowsOrBuilderList();
		}
		
		public interface DoubleQuantileOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.DoubleQuantile)
				MessageOrBuilder {
			/**
			 * <code>required int32 key = 1;</code>
			 */
			int getKey();
			/**
			 * <code>required double value = 2;</code>
			 */
			double getValue();
			/**
			 * <code>required int32 key = 1;</code>
			 */
			boolean hasKey();
			/**
			 * <code>required double value = 2;</code>
			 */
			boolean hasValue();
		}
		
		public interface DoubleRowOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.DoubleRow)
				MessageOrBuilder {
			/**
			 * <code>repeated double cells = 1;</code>
			 */
			double getCells(int index);
			/**
			 * <code>repeated double cells = 1;</code>
			 */
			int getCellsCount();
			/**
			 * <code>repeated double cells = 1;</code>
			 */
			java.util.List<java.lang.Double> getCellsList();
		}
		
		public interface GenerationDataOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.GenerationData)
				MessageOrBuilder {
			/**
			 * <code>optional int32 n_plates = 2;</code>
			 */
			int getNPlates();
			/**
			 * <code>optional float ocean_level = 3;</code>
			 */
			float getOceanLevel();
			/**
			 * <code>optional int32 seed = 1;</code>
			 */
			int getSeed();
			/**
			 * <code>optional string step = 4;</code>
			 */
			java.lang.String getStep();
			/**
			 * <code>optional string step = 4;</code>
			 */
			ByteString getStepBytes();
			/**
			 * <code>optional int32 n_plates = 2;</code>
			 */
			boolean hasNPlates();
			/**
			 * <code>optional float ocean_level = 3;</code>
			 */
			boolean hasOceanLevel();
			/**
			 * <code>optional int32 seed = 1;</code>
			 */
			boolean hasSeed();
			/**
			 * <code>optional string step = 4;</code>
			 */
			boolean hasStep();
		}
		
		public interface IntegerMatrixOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.IntegerMatrix)
				MessageOrBuilder {
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			WorldOuterClass.World.IntegerRow getRows(int index);
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			int getRowsCount();
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			java.util.List<WorldOuterClass.World.IntegerRow> getRowsList();
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			WorldOuterClass.World.IntegerRowOrBuilder getRowsOrBuilder(int index);
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			java.util.List<? extends WorldOuterClass.World.IntegerRowOrBuilder> getRowsOrBuilderList();
		}
		
		public interface IntegerRowOrBuilder extends
				// @@protoc_insertion_point(interface_extends:World.World.IntegerRow)
				MessageOrBuilder {
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			int getCells(int index);
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			int getCellsCount();
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			java.util.List<java.lang.Integer> getCellsList();
		}
		
		/**
		 * Protobuf type {@code World.World.BooleanMatrix}
		 */
		public static final class BooleanMatrix extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.BooleanMatrix)
				BooleanMatrixOrBuilder {
			public static final int ROWS_FIELD_NUMBER = 1;
			private static final BooleanMatrix defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<BooleanMatrix> PARSER = new AbstractParser<BooleanMatrix>() {
				public BooleanMatrix parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new BooleanMatrix(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new BooleanMatrix(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<WorldOuterClass.World.BooleanRow> rows_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use BooleanMatrix.newBuilder() to construct.
			private BooleanMatrix(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private BooleanMatrix(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private BooleanMatrix(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 10: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									rows_ = new java.util.ArrayList<WorldOuterClass.World.BooleanRow>();
									mutable_bitField0_ |= 0x00000001;
								}
								rows_.add(input.readMessage(WorldOuterClass.World.BooleanRow.PARSER, extensionRegistry));
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						rows_ = java.util.Collections.unmodifiableList(rows_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static BooleanMatrix getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_BooleanMatrix_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.BooleanMatrix prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.BooleanMatrix parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.BooleanMatrix parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.BooleanMatrix parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public BooleanMatrix getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<BooleanMatrix> getParserForType() {
				return PARSER;
			}
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			public WorldOuterClass.World.BooleanRow getRows(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			public int getRowsCount() {
				return rows_.size();
			}
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			public java.util.List<WorldOuterClass.World.BooleanRow> getRowsList() {
				return rows_;
			}
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			public WorldOuterClass.World.BooleanRowOrBuilder getRowsOrBuilder(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.BooleanRow rows = 1;</code>
			 */
			public java.util.List<? extends WorldOuterClass.World.BooleanRowOrBuilder> getRowsOrBuilderList() {
				return rows_;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				for(int i = 0; i < rows_.size(); i++) {
					size += CodedOutputStream.computeMessageSize(1, rows_.get(i));
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				rows_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_BooleanMatrix_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.BooleanMatrix.class, WorldOuterClass.World.BooleanMatrix.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < rows_.size(); i++) {
					output.writeMessage(1, rows_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.BooleanMatrix}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.BooleanMatrix)
					WorldOuterClass.World.BooleanMatrixOrBuilder {
				private int bitField0_;
				private java.util.List<WorldOuterClass.World.BooleanRow> rows_ = java.util.Collections.emptyList();
				private RepeatedFieldBuilder<WorldOuterClass.World.BooleanRow, WorldOuterClass.World.BooleanRow.Builder, WorldOuterClass.World.BooleanRowOrBuilder> rowsBuilder_;
				// Construct using WorldOuterClass.World.BooleanMatrix.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_BooleanMatrix_descriptor;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder addAllRows(java.lang.Iterable<? extends WorldOuterClass.World.BooleanRow> values) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						AbstractMessageLite.Builder.addAll(values, rows_);
						onChanged();
					} else {
						rowsBuilder_.addAllMessages(values);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder addRows(WorldOuterClass.World.BooleanRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.BooleanRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(index, value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder addRows(WorldOuterClass.World.BooleanRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.BooleanRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public WorldOuterClass.World.BooleanRow.Builder addRowsBuilder() {
					return getRowsFieldBuilder().addBuilder(WorldOuterClass.World.BooleanRow.getDefaultInstance());
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public WorldOuterClass.World.BooleanRow.Builder addRowsBuilder(int index) {
					return getRowsFieldBuilder().addBuilder(index, WorldOuterClass.World.BooleanRow.getDefaultInstance());
				}
				public WorldOuterClass.World.BooleanMatrix build() {
					WorldOuterClass.World.BooleanMatrix result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.BooleanMatrix buildPartial() {
					WorldOuterClass.World.BooleanMatrix result = new WorldOuterClass.World.BooleanMatrix(this);
					int from_bitField0_ = bitField0_;
					if(rowsBuilder_ == null) {
						if(((bitField0_ & 0x00000001) == 0x00000001)) {
							rows_ = java.util.Collections.unmodifiableList(rows_);
							bitField0_ = (bitField0_ & ~0x00000001);
						}
						result.rows_ = rows_;
					} else {
						result.rows_ = rowsBuilder_.build();
					}
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder clearRows() {
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
						onChanged();
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureRowsIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						rows_ = new java.util.ArrayList<WorldOuterClass.World.BooleanRow>(rows_);
						bitField0_ |= 0x00000001;
					}
				}
				public WorldOuterClass.World.BooleanMatrix getDefaultInstanceForType() {
					return WorldOuterClass.World.BooleanMatrix.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_BooleanMatrix_descriptor;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public WorldOuterClass.World.BooleanRow getRows(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessage(index);
					}
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public WorldOuterClass.World.BooleanRow.Builder getRowsBuilder(int index) {
					return getRowsFieldBuilder().getBuilder(index);
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.BooleanRow.Builder> getRowsBuilderList() {
					return getRowsFieldBuilder().getBuilderList();
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public int getRowsCount() {
					if(rowsBuilder_ == null) {
						return rows_.size();
					} else {
						return rowsBuilder_.getCount();
					}
				}
				private RepeatedFieldBuilder<WorldOuterClass.World.BooleanRow, WorldOuterClass.World.BooleanRow.Builder, WorldOuterClass.World.BooleanRowOrBuilder> getRowsFieldBuilder() {
					if(rowsBuilder_ == null) {
						rowsBuilder_ = new RepeatedFieldBuilder<WorldOuterClass.World.BooleanRow, WorldOuterClass.World.BooleanRow.Builder, WorldOuterClass.World.BooleanRowOrBuilder>(rows_, ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(), isClean());
						rows_ = null;
					}
					return rowsBuilder_;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.BooleanRow> getRowsList() {
					if(rowsBuilder_ == null) {
						return java.util.Collections.unmodifiableList(rows_);
					} else {
						return rowsBuilder_.getMessageList();
					}
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public WorldOuterClass.World.BooleanRowOrBuilder getRowsOrBuilder(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessageOrBuilder(index);
					}
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public java.util.List<? extends WorldOuterClass.World.BooleanRowOrBuilder> getRowsOrBuilderList() {
					if(rowsBuilder_ != null) {
						return rowsBuilder_.getMessageOrBuilderList();
					} else {
						return java.util.Collections.unmodifiableList(rows_);
					}
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_BooleanMatrix_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.BooleanMatrix.class, WorldOuterClass.World.BooleanMatrix.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
						getRowsFieldBuilder();
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.BooleanMatrix) {
						return mergeFrom((WorldOuterClass.World.BooleanMatrix) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.BooleanMatrix other) {
					if(other == WorldOuterClass.World.BooleanMatrix.getDefaultInstance()) {
						return this;
					}
					if(rowsBuilder_ == null) {
						if(!other.rows_.isEmpty()) {
							if(rows_.isEmpty()) {
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000001);
							} else {
								ensureRowsIsMutable();
								rows_.addAll(other.rows_);
							}
							onChanged();
						}
					} else {
						if(!other.rows_.isEmpty()) {
							if(rowsBuilder_.isEmpty()) {
								rowsBuilder_.dispose();
								rowsBuilder_ = null;
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000001);
								rowsBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? getRowsFieldBuilder() : null;
							} else {
								rowsBuilder_.addAllMessages(other.rows_);
							}
						}
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.BooleanMatrix parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.BooleanMatrix) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder removeRows(int index) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.remove(index);
						onChanged();
					} else {
						rowsBuilder_.remove(index);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.BooleanRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.set(index, value);
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.BooleanRow rows = 1;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.BooleanRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.set(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, builderForValue.build());
					}
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.BooleanMatrix)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.BooleanMatrix)
		}
		
		/**
		 * Protobuf type {@code World.World.BooleanRow}
		 */
		public static final class BooleanRow extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.BooleanRow)
				BooleanRowOrBuilder {
			public static final int CELLS_FIELD_NUMBER = 1;
			private static final BooleanRow defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<BooleanRow> PARSER = new AbstractParser<BooleanRow>() {
				public BooleanRow parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new BooleanRow(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new BooleanRow(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<java.lang.Boolean> cells_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use BooleanRow.newBuilder() to construct.
			private BooleanRow(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private BooleanRow(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private BooleanRow(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 8: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									cells_ = new java.util.ArrayList<java.lang.Boolean>();
									mutable_bitField0_ |= 0x00000001;
								}
								cells_.add(input.readBool());
								break;
							}
							case 10: {
								int length = input.readRawVarint32();
								int limit = input.pushLimit(length);
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
									cells_ = new java.util.ArrayList<java.lang.Boolean>();
									mutable_bitField0_ |= 0x00000001;
								}
								while(input.getBytesUntilLimit() > 0) {
									cells_.add(input.readBool());
								}
								input.popLimit(limit);
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static BooleanRow getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_BooleanRow_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.BooleanRow prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.BooleanRow parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.BooleanRow parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.BooleanRow parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			/**
			 * <code>repeated bool cells = 1;</code>
			 */
			public boolean getCells(int index) {
				return cells_.get(index);
			}
			/**
			 * <code>repeated bool cells = 1;</code>
			 */
			public int getCellsCount() {
				return cells_.size();
			}
			/**
			 * <code>repeated bool cells = 1;</code>
			 */
			public java.util.List<java.lang.Boolean> getCellsList() {
				return cells_;
			}
			public BooleanRow getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<BooleanRow> getParserForType() {
				return PARSER;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				{
					int dataSize = 0;
					dataSize = 1 * getCellsList().size();
					size += dataSize;
					size += 1 * getCellsList().size();
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				cells_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_BooleanRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.BooleanRow.class, WorldOuterClass.World.BooleanRow.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < cells_.size(); i++) {
					output.writeBool(1, cells_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.BooleanRow}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.BooleanRow)
					WorldOuterClass.World.BooleanRowOrBuilder {
				private int bitField0_;
				private java.util.List<java.lang.Boolean> cells_ = java.util.Collections.emptyList();
				// Construct using WorldOuterClass.World.BooleanRow.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_BooleanRow_descriptor;
				}
				/**
				 * <code>repeated bool cells = 1;</code>
				 */
				public Builder addAllCells(java.lang.Iterable<? extends java.lang.Boolean> values) {
					ensureCellsIsMutable();
					AbstractMessageLite.Builder.addAll(values, cells_);
					onChanged();
					return this;
				}
				/**
				 * <code>repeated bool cells = 1;</code>
				 */
				public Builder addCells(boolean value) {
					ensureCellsIsMutable();
					cells_.add(value);
					onChanged();
					return this;
				}
				public WorldOuterClass.World.BooleanRow build() {
					WorldOuterClass.World.BooleanRow result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.BooleanRow buildPartial() {
					WorldOuterClass.World.BooleanRow result = new WorldOuterClass.World.BooleanRow(this);
					int from_bitField0_ = bitField0_;
					if(((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
						bitField0_ = (bitField0_ & ~0x00000001);
					}
					result.cells_ = cells_;
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					return this;
				}
				/**
				 * <code>repeated bool cells = 1;</code>
				 */
				public Builder clearCells() {
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					onChanged();
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureCellsIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = new java.util.ArrayList<java.lang.Boolean>(cells_);
						bitField0_ |= 0x00000001;
					}
				}
				/**
				 * <code>repeated bool cells = 1;</code>
				 */
				public boolean getCells(int index) {
					return cells_.get(index);
				}
				/**
				 * <code>repeated bool cells = 1;</code>
				 */
				public int getCellsCount() {
					return cells_.size();
				}
				/**
				 * <code>repeated bool cells = 1;</code>
				 */
				public java.util.List<java.lang.Boolean> getCellsList() {
					return java.util.Collections.unmodifiableList(cells_);
				}
				public WorldOuterClass.World.BooleanRow getDefaultInstanceForType() {
					return WorldOuterClass.World.BooleanRow.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_BooleanRow_descriptor;
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_BooleanRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.BooleanRow.class, WorldOuterClass.World.BooleanRow.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.BooleanRow) {
						return mergeFrom((WorldOuterClass.World.BooleanRow) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.BooleanRow other) {
					if(other == WorldOuterClass.World.BooleanRow.getDefaultInstance()) {
						return this;
					}
					if(!other.cells_.isEmpty()) {
						if(cells_.isEmpty()) {
							cells_ = other.cells_;
							bitField0_ = (bitField0_ & ~0x00000001);
						} else {
							ensureCellsIsMutable();
							cells_.addAll(other.cells_);
						}
						onChanged();
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.BooleanRow parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.BooleanRow) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated bool cells = 1;</code>
				 */
				public Builder setCells(int index, boolean value) {
					ensureCellsIsMutable();
					cells_.set(index, value);
					onChanged();
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.BooleanRow)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.BooleanRow)
		}
		
		/**
		 * Protobuf type {@code World.World}
		 */
		public static final class Builder extends GeneratedMessage.Builder<Builder> implements
				// @@protoc_insertion_point(builder_implements:World.World)
				WorldOuterClass.WorldOrBuilder {
			private int bitField0_;
			private int bitField1_;
			private int worldengineTag_;
			private int worldengineVersion_;
			private java.lang.Object name_ = "";
			private int width_;
			private int height_;
			private WorldOuterClass.World.DoubleMatrix heightMapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> heightMapDataBuilder_;
			private double heightMapThSea_;
			private double heightMapThPlain_;
			private double heightMapThHill_;
			private WorldOuterClass.World.IntegerMatrix plates_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.IntegerMatrix, WorldOuterClass.World.IntegerMatrix.Builder, WorldOuterClass.World.IntegerMatrixOrBuilder> platesBuilder_;
			private WorldOuterClass.World.BooleanMatrix ocean_ = WorldOuterClass.World.BooleanMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.BooleanMatrix, WorldOuterClass.World.BooleanMatrix.Builder, WorldOuterClass.World.BooleanMatrixOrBuilder> oceanBuilder_;
			private WorldOuterClass.World.DoubleMatrix seaDepth_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> seaDepthBuilder_;
			private WorldOuterClass.World.IntegerMatrix biome_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.IntegerMatrix, WorldOuterClass.World.IntegerMatrix.Builder, WorldOuterClass.World.IntegerMatrixOrBuilder> biomeBuilder_;
			private WorldOuterClass.World.DoubleMatrixWithQuantiles humidity_ = WorldOuterClass.World.DoubleMatrixWithQuantiles.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrixWithQuantiles, WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder, WorldOuterClass.World.DoubleMatrixWithQuantilesOrBuilder> humidityBuilder_;
			private WorldOuterClass.World.DoubleMatrix irrigation_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> irrigationBuilder_;
			private WorldOuterClass.World.DoubleMatrix permeabilityData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> permeabilityDataBuilder_;
			private double permeabilityLow_;
			private double permeabilityMed_;
			private WorldOuterClass.World.DoubleMatrix watermapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> watermapDataBuilder_;
			private double watermapCreek_;
			private double watermapRiver_;
			private double watermapMainriver_;
			private WorldOuterClass.World.DoubleMatrix precipitationData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> precipitationDataBuilder_;
			private double precipitationLow_;
			private double precipitationMed_;
			private WorldOuterClass.World.DoubleMatrix temperatureData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> temperatureDataBuilder_;
			private double temperaturePolar_;
			private double temperatureAlpine_;
			private double temperatureBoreal_;
			private double temperatureCool_;
			private double temperatureWarm_;
			private double temperatureSubtropical_;
			private WorldOuterClass.World.GenerationData generationData_ = WorldOuterClass.World.GenerationData.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.GenerationData, WorldOuterClass.World.GenerationData.Builder, WorldOuterClass.World.GenerationDataOrBuilder> generationDataBuilder_;
			private WorldOuterClass.World.DoubleMatrix lakemap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> lakemapBuilder_;
			private WorldOuterClass.World.DoubleMatrix rivermap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> rivermapBuilder_;
			private WorldOuterClass.World.DoubleMatrix icecap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> icecapBuilder_;
			// Construct using WorldOuterClass.World.newBuilder()
			private Builder() {
				maybeForceBuilderInitialization();
			}
			private Builder(GeneratedMessage.BuilderParent parent) {
				super(parent);
				maybeForceBuilderInitialization();
			}
			private static Builder create() {
				return new Builder();
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_descriptor;
			}
			public WorldOuterClass.World build() {
				WorldOuterClass.World result = buildPartial();
				if(!result.isInitialized()) {
					throw newUninitializedMessageException(result);
				}
				return result;
			}
			public WorldOuterClass.World buildPartial() {
				WorldOuterClass.World result = new WorldOuterClass.World(this);
				int from_bitField0_ = bitField0_;
				int from_bitField1_ = bitField1_;
				int to_bitField0_ = 0;
				int to_bitField1_ = 0;
				if(((from_bitField0_ & 0x00000001) == 0x00000001)) {
					to_bitField0_ |= 0x00000001;
				}
				result.worldengineTag_ = worldengineTag_;
				if(((from_bitField0_ & 0x00000002) == 0x00000002)) {
					to_bitField0_ |= 0x00000002;
				}
				result.worldengineVersion_ = worldengineVersion_;
				if(((from_bitField0_ & 0x00000004) == 0x00000004)) {
					to_bitField0_ |= 0x00000004;
				}
				result.name_ = name_;
				if(((from_bitField0_ & 0x00000008) == 0x00000008)) {
					to_bitField0_ |= 0x00000008;
				}
				result.width_ = width_;
				if(((from_bitField0_ & 0x00000010) == 0x00000010)) {
					to_bitField0_ |= 0x00000010;
				}
				result.height_ = height_;
				if(((from_bitField0_ & 0x00000020) == 0x00000020)) {
					to_bitField0_ |= 0x00000020;
				}
				if(heightMapDataBuilder_ == null) {
					result.heightMapData_ = heightMapData_;
				} else {
					result.heightMapData_ = heightMapDataBuilder_.build();
				}
				if(((from_bitField0_ & 0x00000040) == 0x00000040)) {
					to_bitField0_ |= 0x00000040;
				}
				result.heightMapThSea_ = heightMapThSea_;
				if(((from_bitField0_ & 0x00000080) == 0x00000080)) {
					to_bitField0_ |= 0x00000080;
				}
				result.heightMapThPlain_ = heightMapThPlain_;
				if(((from_bitField0_ & 0x00000100) == 0x00000100)) {
					to_bitField0_ |= 0x00000100;
				}
				result.heightMapThHill_ = heightMapThHill_;
				if(((from_bitField0_ & 0x00000200) == 0x00000200)) {
					to_bitField0_ |= 0x00000200;
				}
				if(platesBuilder_ == null) {
					result.plates_ = plates_;
				} else {
					result.plates_ = platesBuilder_.build();
				}
				if(((from_bitField0_ & 0x00000400) == 0x00000400)) {
					to_bitField0_ |= 0x00000400;
				}
				if(oceanBuilder_ == null) {
					result.ocean_ = ocean_;
				} else {
					result.ocean_ = oceanBuilder_.build();
				}
				if(((from_bitField0_ & 0x00000800) == 0x00000800)) {
					to_bitField0_ |= 0x00000800;
				}
				if(seaDepthBuilder_ == null) {
					result.seaDepth_ = seaDepth_;
				} else {
					result.seaDepth_ = seaDepthBuilder_.build();
				}
				if(((from_bitField0_ & 0x00001000) == 0x00001000)) {
					to_bitField0_ |= 0x00001000;
				}
				if(biomeBuilder_ == null) {
					result.biome_ = biome_;
				} else {
					result.biome_ = biomeBuilder_.build();
				}
				if(((from_bitField0_ & 0x00002000) == 0x00002000)) {
					to_bitField0_ |= 0x00002000;
				}
				if(humidityBuilder_ == null) {
					result.humidity_ = humidity_;
				} else {
					result.humidity_ = humidityBuilder_.build();
				}
				if(((from_bitField0_ & 0x00004000) == 0x00004000)) {
					to_bitField0_ |= 0x00004000;
				}
				if(irrigationBuilder_ == null) {
					result.irrigation_ = irrigation_;
				} else {
					result.irrigation_ = irrigationBuilder_.build();
				}
				if(((from_bitField0_ & 0x00008000) == 0x00008000)) {
					to_bitField0_ |= 0x00008000;
				}
				if(permeabilityDataBuilder_ == null) {
					result.permeabilityData_ = permeabilityData_;
				} else {
					result.permeabilityData_ = permeabilityDataBuilder_.build();
				}
				if(((from_bitField0_ & 0x00010000) == 0x00010000)) {
					to_bitField0_ |= 0x00010000;
				}
				result.permeabilityLow_ = permeabilityLow_;
				if(((from_bitField0_ & 0x00020000) == 0x00020000)) {
					to_bitField0_ |= 0x00020000;
				}
				result.permeabilityMed_ = permeabilityMed_;
				if(((from_bitField0_ & 0x00040000) == 0x00040000)) {
					to_bitField0_ |= 0x00040000;
				}
				if(watermapDataBuilder_ == null) {
					result.watermapData_ = watermapData_;
				} else {
					result.watermapData_ = watermapDataBuilder_.build();
				}
				if(((from_bitField0_ & 0x00080000) == 0x00080000)) {
					to_bitField0_ |= 0x00080000;
				}
				result.watermapCreek_ = watermapCreek_;
				if(((from_bitField0_ & 0x00100000) == 0x00100000)) {
					to_bitField0_ |= 0x00100000;
				}
				result.watermapRiver_ = watermapRiver_;
				if(((from_bitField0_ & 0x00200000) == 0x00200000)) {
					to_bitField0_ |= 0x00200000;
				}
				result.watermapMainriver_ = watermapMainriver_;
				if(((from_bitField0_ & 0x00400000) == 0x00400000)) {
					to_bitField0_ |= 0x00400000;
				}
				if(precipitationDataBuilder_ == null) {
					result.precipitationData_ = precipitationData_;
				} else {
					result.precipitationData_ = precipitationDataBuilder_.build();
				}
				if(((from_bitField0_ & 0x00800000) == 0x00800000)) {
					to_bitField0_ |= 0x00800000;
				}
				result.precipitationLow_ = precipitationLow_;
				if(((from_bitField0_ & 0x01000000) == 0x01000000)) {
					to_bitField0_ |= 0x01000000;
				}
				result.precipitationMed_ = precipitationMed_;
				if(((from_bitField0_ & 0x02000000) == 0x02000000)) {
					to_bitField0_ |= 0x02000000;
				}
				if(temperatureDataBuilder_ == null) {
					result.temperatureData_ = temperatureData_;
				} else {
					result.temperatureData_ = temperatureDataBuilder_.build();
				}
				if(((from_bitField0_ & 0x04000000) == 0x04000000)) {
					to_bitField0_ |= 0x04000000;
				}
				result.temperaturePolar_ = temperaturePolar_;
				if(((from_bitField0_ & 0x08000000) == 0x08000000)) {
					to_bitField0_ |= 0x08000000;
				}
				result.temperatureAlpine_ = temperatureAlpine_;
				if(((from_bitField0_ & 0x10000000) == 0x10000000)) {
					to_bitField0_ |= 0x10000000;
				}
				result.temperatureBoreal_ = temperatureBoreal_;
				if(((from_bitField0_ & 0x20000000) == 0x20000000)) {
					to_bitField0_ |= 0x20000000;
				}
				result.temperatureCool_ = temperatureCool_;
				if(((from_bitField0_ & 0x40000000) == 0x40000000)) {
					to_bitField0_ |= 0x40000000;
				}
				result.temperatureWarm_ = temperatureWarm_;
				if(((from_bitField0_ & 0x80000000) == 0x80000000)) {
					to_bitField0_ |= 0x80000000;
				}
				result.temperatureSubtropical_ = temperatureSubtropical_;
				if(((from_bitField1_ & 0x00000001) == 0x00000001)) {
					to_bitField1_ |= 0x00000001;
				}
				if(generationDataBuilder_ == null) {
					result.generationData_ = generationData_;
				} else {
					result.generationData_ = generationDataBuilder_.build();
				}
				if(((from_bitField1_ & 0x00000002) == 0x00000002)) {
					to_bitField1_ |= 0x00000002;
				}
				if(lakemapBuilder_ == null) {
					result.lakemap_ = lakemap_;
				} else {
					result.lakemap_ = lakemapBuilder_.build();
				}
				if(((from_bitField1_ & 0x00000004) == 0x00000004)) {
					to_bitField1_ |= 0x00000004;
				}
				if(rivermapBuilder_ == null) {
					result.rivermap_ = rivermap_;
				} else {
					result.rivermap_ = rivermapBuilder_.build();
				}
				if(((from_bitField1_ & 0x00000008) == 0x00000008)) {
					to_bitField1_ |= 0x00000008;
				}
				if(icecapBuilder_ == null) {
					result.icecap_ = icecap_;
				} else {
					result.icecap_ = icecapBuilder_.build();
				}
				result.bitField0_ = to_bitField0_;
				result.bitField1_ = to_bitField1_;
				onBuilt();
				return result;
			}
			public Builder clear() {
				super.clear();
				worldengineTag_ = 0;
				bitField0_ = (bitField0_ & ~0x00000001);
				worldengineVersion_ = 0;
				bitField0_ = (bitField0_ & ~0x00000002);
				name_ = "";
				bitField0_ = (bitField0_ & ~0x00000004);
				width_ = 0;
				bitField0_ = (bitField0_ & ~0x00000008);
				height_ = 0;
				bitField0_ = (bitField0_ & ~0x00000010);
				if(heightMapDataBuilder_ == null) {
					heightMapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					heightMapDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000020);
				heightMapThSea_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000040);
				heightMapThPlain_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000080);
				heightMapThHill_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000100);
				if(platesBuilder_ == null) {
					plates_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
				} else {
					platesBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000200);
				if(oceanBuilder_ == null) {
					ocean_ = WorldOuterClass.World.BooleanMatrix.getDefaultInstance();
				} else {
					oceanBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000400);
				if(seaDepthBuilder_ == null) {
					seaDepth_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					seaDepthBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000800);
				if(biomeBuilder_ == null) {
					biome_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
				} else {
					biomeBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00001000);
				if(humidityBuilder_ == null) {
					humidity_ = WorldOuterClass.World.DoubleMatrixWithQuantiles.getDefaultInstance();
				} else {
					humidityBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00002000);
				if(irrigationBuilder_ == null) {
					irrigation_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					irrigationBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00004000);
				if(permeabilityDataBuilder_ == null) {
					permeabilityData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					permeabilityDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00008000);
				permeabilityLow_ = 0D;
				bitField0_ = (bitField0_ & ~0x00010000);
				permeabilityMed_ = 0D;
				bitField0_ = (bitField0_ & ~0x00020000);
				if(watermapDataBuilder_ == null) {
					watermapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					watermapDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00040000);
				watermapCreek_ = 0D;
				bitField0_ = (bitField0_ & ~0x00080000);
				watermapRiver_ = 0D;
				bitField0_ = (bitField0_ & ~0x00100000);
				watermapMainriver_ = 0D;
				bitField0_ = (bitField0_ & ~0x00200000);
				if(precipitationDataBuilder_ == null) {
					precipitationData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					precipitationDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00400000);
				precipitationLow_ = 0D;
				bitField0_ = (bitField0_ & ~0x00800000);
				precipitationMed_ = 0D;
				bitField0_ = (bitField0_ & ~0x01000000);
				if(temperatureDataBuilder_ == null) {
					temperatureData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					temperatureDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x02000000);
				temperaturePolar_ = 0D;
				bitField0_ = (bitField0_ & ~0x04000000);
				temperatureAlpine_ = 0D;
				bitField0_ = (bitField0_ & ~0x08000000);
				temperatureBoreal_ = 0D;
				bitField0_ = (bitField0_ & ~0x10000000);
				temperatureCool_ = 0D;
				bitField0_ = (bitField0_ & ~0x20000000);
				temperatureWarm_ = 0D;
				bitField0_ = (bitField0_ & ~0x40000000);
				temperatureSubtropical_ = 0D;
				bitField0_ = (bitField0_ & ~0x80000000);
				if(generationDataBuilder_ == null) {
					generationData_ = WorldOuterClass.World.GenerationData.getDefaultInstance();
				} else {
					generationDataBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000001);
				if(lakemapBuilder_ == null) {
					lakemap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					lakemapBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000002);
				if(rivermapBuilder_ == null) {
					rivermap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					rivermapBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000004);
				if(icecapBuilder_ == null) {
					icecap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				} else {
					icecapBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000008);
				return this;
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public Builder clearBiome() {
				if(biomeBuilder_ == null) {
					biome_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
					onChanged();
				} else {
					biomeBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00001000);
				return this;
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public Builder clearGenerationData() {
				if(generationDataBuilder_ == null) {
					generationData_ = WorldOuterClass.World.GenerationData.getDefaultInstance();
					onChanged();
				} else {
					generationDataBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000001);
				return this;
			}
			/**
			 * <code>required int32 height = 5;</code>
			 */
			public Builder clearHeight() {
				bitField0_ = (bitField0_ & ~0x00000010);
				height_ = 0;
				onChanged();
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public Builder clearHeightMapData() {
				if(heightMapDataBuilder_ == null) {
					heightMapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					heightMapDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000020);
				return this;
			}
			/**
			 * <code>required double heightMapTh_hill = 9;</code>
			 */
			public Builder clearHeightMapThHill() {
				bitField0_ = (bitField0_ & ~0x00000100);
				heightMapThHill_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>required double heightMapTh_plain = 8;</code>
			 */
			public Builder clearHeightMapThPlain() {
				bitField0_ = (bitField0_ & ~0x00000080);
				heightMapThPlain_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>required double heightMapTh_sea = 7;</code>
			 */
			public Builder clearHeightMapThSea() {
				bitField0_ = (bitField0_ & ~0x00000040);
				heightMapThSea_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public Builder clearHumidity() {
				if(humidityBuilder_ == null) {
					humidity_ = WorldOuterClass.World.DoubleMatrixWithQuantiles.getDefaultInstance();
					onChanged();
				} else {
					humidityBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00002000);
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public Builder clearIcecap() {
				if(icecapBuilder_ == null) {
					icecap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					icecapBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000008);
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public Builder clearIrrigation() {
				if(irrigationBuilder_ == null) {
					irrigation_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					irrigationBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00004000);
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public Builder clearLakemap() {
				if(lakemapBuilder_ == null) {
					lakemap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					lakemapBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000002);
				return this;
			}
			/**
			 * <code>required string name = 3;</code>
			 */
			public Builder clearName() {
				bitField0_ = (bitField0_ & ~0x00000004);
				name_ = getDefaultInstance().getName();
				onChanged();
				return this;
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public Builder clearOcean() {
				if(oceanBuilder_ == null) {
					ocean_ = WorldOuterClass.World.BooleanMatrix.getDefaultInstance();
					onChanged();
				} else {
					oceanBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000400);
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public Builder clearPermeabilityData() {
				if(permeabilityDataBuilder_ == null) {
					permeabilityData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					permeabilityDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00008000);
				return this;
			}
			/**
			 * <code>optional double permeability_low = 17;</code>
			 */
			public Builder clearPermeabilityLow() {
				bitField0_ = (bitField0_ & ~0x00010000);
				permeabilityLow_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double permeability_med = 18;</code>
			 */
			public Builder clearPermeabilityMed() {
				bitField0_ = (bitField0_ & ~0x00020000);
				permeabilityMed_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public Builder clearPlates() {
				if(platesBuilder_ == null) {
					plates_ = WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
					onChanged();
				} else {
					platesBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000200);
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public Builder clearPrecipitationData() {
				if(precipitationDataBuilder_ == null) {
					precipitationData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					precipitationDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00400000);
				return this;
			}
			/**
			 * <code>optional double precipitation_low = 24;</code>
			 */
			public Builder clearPrecipitationLow() {
				bitField0_ = (bitField0_ & ~0x00800000);
				precipitationLow_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double precipitation_med = 25;</code>
			 */
			public Builder clearPrecipitationMed() {
				bitField0_ = (bitField0_ & ~0x01000000);
				precipitationMed_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public Builder clearRivermap() {
				if(rivermapBuilder_ == null) {
					rivermap_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					rivermapBuilder_.clear();
				}
				bitField1_ = (bitField1_ & ~0x00000004);
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public Builder clearSeaDepth() {
				if(seaDepthBuilder_ == null) {
					seaDepth_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					seaDepthBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00000800);
				return this;
			}
			/**
			 * <code>optional double temperature_alpine = 28;</code>
			 */
			public Builder clearTemperatureAlpine() {
				bitField0_ = (bitField0_ & ~0x08000000);
				temperatureAlpine_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_boreal = 29;</code>
			 */
			public Builder clearTemperatureBoreal() {
				bitField0_ = (bitField0_ & ~0x10000000);
				temperatureBoreal_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_cool = 30;</code>
			 */
			public Builder clearTemperatureCool() {
				bitField0_ = (bitField0_ & ~0x20000000);
				temperatureCool_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public Builder clearTemperatureData() {
				if(temperatureDataBuilder_ == null) {
					temperatureData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					temperatureDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x02000000);
				return this;
			}
			/**
			 * <code>optional double temperature_polar = 27;</code>
			 */
			public Builder clearTemperaturePolar() {
				bitField0_ = (bitField0_ & ~0x04000000);
				temperaturePolar_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_subtropical = 32;</code>
			 */
			public Builder clearTemperatureSubtropical() {
				bitField0_ = (bitField0_ & ~0x80000000);
				temperatureSubtropical_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_warm = 31;</code>
			 */
			public Builder clearTemperatureWarm() {
				bitField0_ = (bitField0_ & ~0x40000000);
				temperatureWarm_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double watermap_creek = 20;</code>
			 */
			public Builder clearWatermapCreek() {
				bitField0_ = (bitField0_ & ~0x00080000);
				watermapCreek_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public Builder clearWatermapData() {
				if(watermapDataBuilder_ == null) {
					watermapData_ = WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
					onChanged();
				} else {
					watermapDataBuilder_.clear();
				}
				bitField0_ = (bitField0_ & ~0x00040000);
				return this;
			}
			/**
			 * <code>optional double watermap_mainriver = 22;</code>
			 */
			public Builder clearWatermapMainriver() {
				bitField0_ = (bitField0_ & ~0x00200000);
				watermapMainriver_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double watermap_river = 21;</code>
			 */
			public Builder clearWatermapRiver() {
				bitField0_ = (bitField0_ & ~0x00100000);
				watermapRiver_ = 0D;
				onChanged();
				return this;
			}
			/**
			 * <code>required int32 width = 4;</code>
			 */
			public Builder clearWidth() {
				bitField0_ = (bitField0_ & ~0x00000008);
				width_ = 0;
				onChanged();
				return this;
			}
			/**
			 * <code>required int32 worldengine_tag = 1;</code>
			 * <p>
			 * <pre>
			 * these two fields have been introduced in Worldengine 0.18.0
			 * </pre>
			 */
			public Builder clearWorldengineTag() {
				bitField0_ = (bitField0_ & ~0x00000001);
				worldengineTag_ = 0;
				onChanged();
				return this;
			}
			/**
			 * <code>required int32 worldengine_version = 2;</code>
			 */
			public Builder clearWorldengineVersion() {
				bitField0_ = (bitField0_ & ~0x00000002);
				worldengineVersion_ = 0;
				onChanged();
				return this;
			}
			public Builder clone() {
				return create().mergeFrom(buildPartial());
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public WorldOuterClass.World.IntegerMatrix getBiome() {
				if(biomeBuilder_ == null) {
					return biome_;
				} else {
					return biomeBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public Builder setBiome(WorldOuterClass.World.IntegerMatrix value) {
				if(biomeBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					biome_ = value;
					onChanged();
				} else {
					biomeBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00001000;
				return this;
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public WorldOuterClass.World.IntegerMatrix.Builder getBiomeBuilder() {
				bitField0_ |= 0x00001000;
				onChanged();
				return getBiomeFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.IntegerMatrix, WorldOuterClass.World.IntegerMatrix.Builder, WorldOuterClass.World.IntegerMatrixOrBuilder> getBiomeFieldBuilder() {
				if(biomeBuilder_ == null) {
					biomeBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.IntegerMatrix, WorldOuterClass.World.IntegerMatrix.Builder, WorldOuterClass.World.IntegerMatrixOrBuilder>(getBiome(), getParentForChildren(), isClean());
					biome_ = null;
				}
				return biomeBuilder_;
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public WorldOuterClass.World.IntegerMatrixOrBuilder getBiomeOrBuilder() {
				if(biomeBuilder_ != null) {
					return biomeBuilder_.getMessageOrBuilder();
				} else {
					return biome_;
				}
			}
			public WorldOuterClass.World getDefaultInstanceForType() {
				return WorldOuterClass.World.getDefaultInstance();
			}
			public Descriptors.Descriptor getDescriptorForType() {
				return WorldOuterClass.internal_static_World_World_descriptor;
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public WorldOuterClass.World.GenerationData getGenerationData() {
				if(generationDataBuilder_ == null) {
					return generationData_;
				} else {
					return generationDataBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public Builder setGenerationData(WorldOuterClass.World.GenerationData value) {
				if(generationDataBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					generationData_ = value;
					onChanged();
				} else {
					generationDataBuilder_.setMessage(value);
				}
				bitField1_ |= 0x00000001;
				return this;
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public WorldOuterClass.World.GenerationData.Builder getGenerationDataBuilder() {
				bitField1_ |= 0x00000001;
				onChanged();
				return getGenerationDataFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.GenerationData, WorldOuterClass.World.GenerationData.Builder, WorldOuterClass.World.GenerationDataOrBuilder> getGenerationDataFieldBuilder() {
				if(generationDataBuilder_ == null) {
					generationDataBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.GenerationData, WorldOuterClass.World.GenerationData.Builder, WorldOuterClass.World.GenerationDataOrBuilder>(getGenerationData(), getParentForChildren(), isClean());
					generationData_ = null;
				}
				return generationDataBuilder_;
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public WorldOuterClass.World.GenerationDataOrBuilder getGenerationDataOrBuilder() {
				if(generationDataBuilder_ != null) {
					return generationDataBuilder_.getMessageOrBuilder();
				} else {
					return generationData_;
				}
			}
			/**
			 * <code>required int32 height = 5;</code>
			 */
			public int getHeight() {
				return height_;
			}
			/**
			 * <code>required int32 height = 5;</code>
			 */
			public Builder setHeight(int value) {
				bitField0_ |= 0x00000010;
				height_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix getHeightMapData() {
				if(heightMapDataBuilder_ == null) {
					return heightMapData_;
				} else {
					return heightMapDataBuilder_.getMessage();
				}
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public Builder setHeightMapData(WorldOuterClass.World.DoubleMatrix value) {
				if(heightMapDataBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					heightMapData_ = value;
					onChanged();
				} else {
					heightMapDataBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00000020;
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getHeightMapDataBuilder() {
				bitField0_ |= 0x00000020;
				onChanged();
				return getHeightMapDataFieldBuilder().getBuilder();
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getHeightMapDataFieldBuilder() {
				if(heightMapDataBuilder_ == null) {
					heightMapDataBuilder_ = new SingleFieldBuilder<>(getHeightMapData(), getParentForChildren(), isClean());
					heightMapData_ = null;
				}
				return heightMapDataBuilder_;
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getHeightMapDataOrBuilder() {
				if(heightMapDataBuilder_ != null) {
					return heightMapDataBuilder_.getMessageOrBuilder();
				} else {
					return heightMapData_;
				}
			}
			/**
			 * <code>required double heightMapTh_hill = 9;</code>
			 */
			public double getHeightMapThHill() {
				return heightMapThHill_;
			}
			/**
			 * <code>required double heightMapTh_hill = 9;</code>
			 */
			public Builder setHeightMapThHill(double value) {
				bitField0_ |= 0x00000100;
				heightMapThHill_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required double heightMapTh_plain = 8;</code>
			 */
			public double getHeightMapThPlain() {
				return heightMapThPlain_;
			}
			/**
			 * <code>required double heightMapTh_plain = 8;</code>
			 */
			public Builder setHeightMapThPlain(double value) {
				bitField0_ |= 0x00000080;
				heightMapThPlain_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required double heightMapTh_sea = 7;</code>
			 */
			public double getHeightMapThSea() {
				return heightMapThSea_;
			}
			/**
			 * <code>required double heightMapTh_sea = 7;</code>
			 */
			public Builder setHeightMapThSea(double value) {
				bitField0_ |= 0x00000040;
				heightMapThSea_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixWithQuantiles getHumidity() {
				if(humidityBuilder_ == null) {
					return humidity_;
				} else {
					return humidityBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public Builder setHumidity(WorldOuterClass.World.DoubleMatrixWithQuantiles value) {
				if(humidityBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					humidity_ = value;
					onChanged();
				} else {
					humidityBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00002000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder getHumidityBuilder() {
				bitField0_ |= 0x00002000;
				onChanged();
				return getHumidityFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrixWithQuantiles, WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder, WorldOuterClass.World.DoubleMatrixWithQuantilesOrBuilder> getHumidityFieldBuilder() {
				if(humidityBuilder_ == null) {
					humidityBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrixWithQuantiles, WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder, WorldOuterClass.World.DoubleMatrixWithQuantilesOrBuilder>(getHumidity(), getParentForChildren(), isClean());
					humidity_ = null;
				}
				return humidityBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixWithQuantilesOrBuilder getHumidityOrBuilder() {
				if(humidityBuilder_ != null) {
					return humidityBuilder_.getMessageOrBuilder();
				} else {
					return humidity_;
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix getIcecap() {
				if(icecapBuilder_ == null) {
					return icecap_;
				} else {
					return icecapBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public Builder setIcecap(WorldOuterClass.World.DoubleMatrix value) {
				if(icecapBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					icecap_ = value;
					onChanged();
				} else {
					icecapBuilder_.setMessage(value);
				}
				bitField1_ |= 0x00000008;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getIcecapBuilder() {
				bitField1_ |= 0x00000008;
				onChanged();
				return getIcecapFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getIcecapFieldBuilder() {
				if(icecapBuilder_ == null) {
					icecapBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getIcecap(), getParentForChildren(), isClean());
					icecap_ = null;
				}
				return icecapBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getIcecapOrBuilder() {
				if(icecapBuilder_ != null) {
					return icecapBuilder_.getMessageOrBuilder();
				} else {
					return icecap_;
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix getIrrigation() {
				if(irrigationBuilder_ == null) {
					return irrigation_;
				} else {
					return irrigationBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public Builder setIrrigation(WorldOuterClass.World.DoubleMatrix value) {
				if(irrigationBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					irrigation_ = value;
					onChanged();
				} else {
					irrigationBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00004000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getIrrigationBuilder() {
				bitField0_ |= 0x00004000;
				onChanged();
				return getIrrigationFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getIrrigationFieldBuilder() {
				if(irrigationBuilder_ == null) {
					irrigationBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getIrrigation(), getParentForChildren(), isClean());
					irrigation_ = null;
				}
				return irrigationBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getIrrigationOrBuilder() {
				if(irrigationBuilder_ != null) {
					return irrigationBuilder_.getMessageOrBuilder();
				} else {
					return irrigation_;
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public WorldOuterClass.World.DoubleMatrix getLakemap() {
				if(lakemapBuilder_ == null) {
					return lakemap_;
				} else {
					return lakemapBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public Builder setLakemap(WorldOuterClass.World.DoubleMatrix value) {
				if(lakemapBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					lakemap_ = value;
					onChanged();
				} else {
					lakemapBuilder_.setMessage(value);
				}
				bitField1_ |= 0x00000002;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getLakemapBuilder() {
				bitField1_ |= 0x00000002;
				onChanged();
				return getLakemapFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getLakemapFieldBuilder() {
				if(lakemapBuilder_ == null) {
					lakemapBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getLakemap(), getParentForChildren(), isClean());
					lakemap_ = null;
				}
				return lakemapBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getLakemapOrBuilder() {
				if(lakemapBuilder_ != null) {
					return lakemapBuilder_.getMessageOrBuilder();
				} else {
					return lakemap_;
				}
			}
			/**
			 * <code>required string name = 3;</code>
			 */
			public java.lang.String getName() {
				java.lang.Object ref = name_;
				if(!(ref instanceof java.lang.String)) {
					ByteString bs = (ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if(bs.isValidUtf8()) {
						name_ = s;
					}
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}
			/**
			 * <code>required string name = 3;</code>
			 */
			public Builder setName(java.lang.String value) {
				if(value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000004;
				name_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required string name = 3;</code>
			 */
			public ByteString getNameBytes() {
				java.lang.Object ref = name_;
				if(ref instanceof String) {
					ByteString b = ByteString.copyFromUtf8((java.lang.String) ref);
					name_ = b;
					return b;
				} else {
					return (ByteString) ref;
				}
			}
			/**
			 * <code>required string name = 3;</code>
			 */
			public Builder setNameBytes(ByteString value) {
				if(value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000004;
				name_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public WorldOuterClass.World.BooleanMatrix getOcean() {
				if(oceanBuilder_ == null) {
					return ocean_;
				} else {
					return oceanBuilder_.getMessage();
				}
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public Builder setOcean(WorldOuterClass.World.BooleanMatrix value) {
				if(oceanBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					ocean_ = value;
					onChanged();
				} else {
					oceanBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00000400;
				return this;
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public WorldOuterClass.World.BooleanMatrix.Builder getOceanBuilder() {
				bitField0_ |= 0x00000400;
				onChanged();
				return getOceanFieldBuilder().getBuilder();
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.BooleanMatrix, WorldOuterClass.World.BooleanMatrix.Builder, WorldOuterClass.World.BooleanMatrixOrBuilder> getOceanFieldBuilder() {
				if(oceanBuilder_ == null) {
					oceanBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.BooleanMatrix, WorldOuterClass.World.BooleanMatrix.Builder, WorldOuterClass.World.BooleanMatrixOrBuilder>(getOcean(), getParentForChildren(), isClean());
					ocean_ = null;
				}
				return oceanBuilder_;
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public WorldOuterClass.World.BooleanMatrixOrBuilder getOceanOrBuilder() {
				if(oceanBuilder_ != null) {
					return oceanBuilder_.getMessageOrBuilder();
				} else {
					return ocean_;
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix getPermeabilityData() {
				if(permeabilityDataBuilder_ == null) {
					return permeabilityData_;
				} else {
					return permeabilityDataBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public Builder setPermeabilityData(WorldOuterClass.World.DoubleMatrix value) {
				if(permeabilityDataBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					permeabilityData_ = value;
					onChanged();
				} else {
					permeabilityDataBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00008000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getPermeabilityDataBuilder() {
				bitField0_ |= 0x00008000;
				onChanged();
				return getPermeabilityDataFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getPermeabilityDataFieldBuilder() {
				if(permeabilityDataBuilder_ == null) {
					permeabilityDataBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getPermeabilityData(), getParentForChildren(), isClean());
					permeabilityData_ = null;
				}
				return permeabilityDataBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getPermeabilityDataOrBuilder() {
				if(permeabilityDataBuilder_ != null) {
					return permeabilityDataBuilder_.getMessageOrBuilder();
				} else {
					return permeabilityData_;
				}
			}
			/**
			 * <code>optional double permeability_low = 17;</code>
			 */
			public double getPermeabilityLow() {
				return permeabilityLow_;
			}
			/**
			 * <code>optional double permeability_low = 17;</code>
			 */
			public Builder setPermeabilityLow(double value) {
				bitField0_ |= 0x00010000;
				permeabilityLow_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double permeability_med = 18;</code>
			 */
			public double getPermeabilityMed() {
				return permeabilityMed_;
			}
			/**
			 * <code>optional double permeability_med = 18;</code>
			 */
			public Builder setPermeabilityMed(double value) {
				bitField0_ |= 0x00020000;
				permeabilityMed_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public WorldOuterClass.World.IntegerMatrix getPlates() {
				if(platesBuilder_ == null) {
					return plates_;
				} else {
					return platesBuilder_.getMessage();
				}
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public Builder setPlates(WorldOuterClass.World.IntegerMatrix value) {
				if(platesBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					plates_ = value;
					onChanged();
				} else {
					platesBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00000200;
				return this;
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public WorldOuterClass.World.IntegerMatrix.Builder getPlatesBuilder() {
				bitField0_ |= 0x00000200;
				onChanged();
				return getPlatesFieldBuilder().getBuilder();
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.IntegerMatrix, WorldOuterClass.World.IntegerMatrix.Builder, WorldOuterClass.World.IntegerMatrixOrBuilder> getPlatesFieldBuilder() {
				if(platesBuilder_ == null) {
					platesBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.IntegerMatrix, WorldOuterClass.World.IntegerMatrix.Builder, WorldOuterClass.World.IntegerMatrixOrBuilder>(getPlates(), getParentForChildren(), isClean());
					plates_ = null;
				}
				return platesBuilder_;
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public WorldOuterClass.World.IntegerMatrixOrBuilder getPlatesOrBuilder() {
				if(platesBuilder_ != null) {
					return platesBuilder_.getMessageOrBuilder();
				} else {
					return plates_;
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix getPrecipitationData() {
				if(precipitationDataBuilder_ == null) {
					return precipitationData_;
				} else {
					return precipitationDataBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public Builder setPrecipitationData(WorldOuterClass.World.DoubleMatrix value) {
				if(precipitationDataBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					precipitationData_ = value;
					onChanged();
				} else {
					precipitationDataBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00400000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getPrecipitationDataBuilder() {
				bitField0_ |= 0x00400000;
				onChanged();
				return getPrecipitationDataFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getPrecipitationDataFieldBuilder() {
				if(precipitationDataBuilder_ == null) {
					precipitationDataBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getPrecipitationData(), getParentForChildren(), isClean());
					precipitationData_ = null;
				}
				return precipitationDataBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getPrecipitationDataOrBuilder() {
				if(precipitationDataBuilder_ != null) {
					return precipitationDataBuilder_.getMessageOrBuilder();
				} else {
					return precipitationData_;
				}
			}
			/**
			 * <code>optional double precipitation_low = 24;</code>
			 */
			public double getPrecipitationLow() {
				return precipitationLow_;
			}
			/**
			 * <code>optional double precipitation_low = 24;</code>
			 */
			public Builder setPrecipitationLow(double value) {
				bitField0_ |= 0x00800000;
				precipitationLow_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double precipitation_med = 25;</code>
			 */
			public double getPrecipitationMed() {
				return precipitationMed_;
			}
			/**
			 * <code>optional double precipitation_med = 25;</code>
			 */
			public Builder setPrecipitationMed(double value) {
				bitField0_ |= 0x01000000;
				precipitationMed_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public WorldOuterClass.World.DoubleMatrix getRivermap() {
				if(rivermapBuilder_ == null) {
					return rivermap_;
				} else {
					return rivermapBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public Builder setRivermap(WorldOuterClass.World.DoubleMatrix value) {
				if(rivermapBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					rivermap_ = value;
					onChanged();
				} else {
					rivermapBuilder_.setMessage(value);
				}
				bitField1_ |= 0x00000004;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getRivermapBuilder() {
				bitField1_ |= 0x00000004;
				onChanged();
				return getRivermapFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getRivermapFieldBuilder() {
				if(rivermapBuilder_ == null) {
					rivermapBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getRivermap(), getParentForChildren(), isClean());
					rivermap_ = null;
				}
				return rivermapBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getRivermapOrBuilder() {
				if(rivermapBuilder_ != null) {
					return rivermapBuilder_.getMessageOrBuilder();
				} else {
					return rivermap_;
				}
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public WorldOuterClass.World.DoubleMatrix getSeaDepth() {
				if(seaDepthBuilder_ == null) {
					return seaDepth_;
				} else {
					return seaDepthBuilder_.getMessage();
				}
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public Builder setSeaDepth(WorldOuterClass.World.DoubleMatrix value) {
				if(seaDepthBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					seaDepth_ = value;
					onChanged();
				} else {
					seaDepthBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00000800;
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getSeaDepthBuilder() {
				bitField0_ |= 0x00000800;
				onChanged();
				return getSeaDepthFieldBuilder().getBuilder();
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getSeaDepthFieldBuilder() {
				if(seaDepthBuilder_ == null) {
					seaDepthBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getSeaDepth(), getParentForChildren(), isClean());
					seaDepth_ = null;
				}
				return seaDepthBuilder_;
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getSeaDepthOrBuilder() {
				if(seaDepthBuilder_ != null) {
					return seaDepthBuilder_.getMessageOrBuilder();
				} else {
					return seaDepth_;
				}
			}
			/**
			 * <code>optional double temperature_alpine = 28;</code>
			 */
			public double getTemperatureAlpine() {
				return temperatureAlpine_;
			}
			/**
			 * <code>optional double temperature_alpine = 28;</code>
			 */
			public Builder setTemperatureAlpine(double value) {
				bitField0_ |= 0x08000000;
				temperatureAlpine_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_boreal = 29;</code>
			 */
			public double getTemperatureBoreal() {
				return temperatureBoreal_;
			}
			/**
			 * <code>optional double temperature_boreal = 29;</code>
			 */
			public Builder setTemperatureBoreal(double value) {
				bitField0_ |= 0x10000000;
				temperatureBoreal_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_cool = 30;</code>
			 */
			public double getTemperatureCool() {
				return temperatureCool_;
			}
			/**
			 * <code>optional double temperature_cool = 30;</code>
			 */
			public Builder setTemperatureCool(double value) {
				bitField0_ |= 0x20000000;
				temperatureCool_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix getTemperatureData() {
				if(temperatureDataBuilder_ == null) {
					return temperatureData_;
				} else {
					return temperatureDataBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public Builder setTemperatureData(WorldOuterClass.World.DoubleMatrix value) {
				if(temperatureDataBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					temperatureData_ = value;
					onChanged();
				} else {
					temperatureDataBuilder_.setMessage(value);
				}
				bitField0_ |= 0x02000000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getTemperatureDataBuilder() {
				bitField0_ |= 0x02000000;
				onChanged();
				return getTemperatureDataFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getTemperatureDataFieldBuilder() {
				if(temperatureDataBuilder_ == null) {
					temperatureDataBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getTemperatureData(), getParentForChildren(), isClean());
					temperatureData_ = null;
				}
				return temperatureDataBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getTemperatureDataOrBuilder() {
				if(temperatureDataBuilder_ != null) {
					return temperatureDataBuilder_.getMessageOrBuilder();
				} else {
					return temperatureData_;
				}
			}
			/**
			 * <code>optional double temperature_polar = 27;</code>
			 */
			public double getTemperaturePolar() {
				return temperaturePolar_;
			}
			/**
			 * <code>optional double temperature_polar = 27;</code>
			 */
			public Builder setTemperaturePolar(double value) {
				bitField0_ |= 0x04000000;
				temperaturePolar_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_subtropical = 32;</code>
			 */
			public double getTemperatureSubtropical() {
				return temperatureSubtropical_;
			}
			/**
			 * <code>optional double temperature_subtropical = 32;</code>
			 */
			public Builder setTemperatureSubtropical(double value) {
				bitField0_ |= 0x80000000;
				temperatureSubtropical_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double temperature_warm = 31;</code>
			 */
			public double getTemperatureWarm() {
				return temperatureWarm_;
			}
			/**
			 * <code>optional double temperature_warm = 31;</code>
			 */
			public Builder setTemperatureWarm(double value) {
				bitField0_ |= 0x40000000;
				temperatureWarm_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double watermap_creek = 20;</code>
			 */
			public double getWatermapCreek() {
				return watermapCreek_;
			}
			/**
			 * <code>optional double watermap_creek = 20;</code>
			 */
			public Builder setWatermapCreek(double value) {
				bitField0_ |= 0x00080000;
				watermapCreek_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix getWatermapData() {
				if(watermapDataBuilder_ == null) {
					return watermapData_;
				} else {
					return watermapDataBuilder_.getMessage();
				}
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public Builder setWatermapData(WorldOuterClass.World.DoubleMatrix value) {
				if(watermapDataBuilder_ == null) {
					if(value == null) {
						throw new NullPointerException();
					}
					watermapData_ = value;
					onChanged();
				} else {
					watermapDataBuilder_.setMessage(value);
				}
				bitField0_ |= 0x00040000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrix.Builder getWatermapDataBuilder() {
				bitField0_ |= 0x00040000;
				onChanged();
				return getWatermapDataFieldBuilder().getBuilder();
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			private SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder> getWatermapDataFieldBuilder() {
				if(watermapDataBuilder_ == null) {
					watermapDataBuilder_ = new SingleFieldBuilder<WorldOuterClass.World.DoubleMatrix, WorldOuterClass.World.DoubleMatrix.Builder, WorldOuterClass.World.DoubleMatrixOrBuilder>(getWatermapData(), getParentForChildren(), isClean());
					watermapData_ = null;
				}
				return watermapDataBuilder_;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public WorldOuterClass.World.DoubleMatrixOrBuilder getWatermapDataOrBuilder() {
				if(watermapDataBuilder_ != null) {
					return watermapDataBuilder_.getMessageOrBuilder();
				} else {
					return watermapData_;
				}
			}
			/**
			 * <code>optional double watermap_mainriver = 22;</code>
			 */
			public double getWatermapMainriver() {
				return watermapMainriver_;
			}
			/**
			 * <code>optional double watermap_mainriver = 22;</code>
			 */
			public Builder setWatermapMainriver(double value) {
				bitField0_ |= 0x00200000;
				watermapMainriver_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional double watermap_river = 21;</code>
			 */
			public double getWatermapRiver() {
				return watermapRiver_;
			}
			/**
			 * <code>optional double watermap_river = 21;</code>
			 */
			public Builder setWatermapRiver(double value) {
				bitField0_ |= 0x00100000;
				watermapRiver_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required int32 width = 4;</code>
			 */
			public int getWidth() {
				return width_;
			}
			/**
			 * <code>required int32 width = 4;</code>
			 */
			public Builder setWidth(int value) {
				bitField0_ |= 0x00000008;
				width_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required int32 worldengine_tag = 1;</code>
			 * <p>
			 * <pre>
			 * these two fields have been introduced in Worldengine 0.18.0
			 * </pre>
			 */
			public int getWorldengineTag() {
				return worldengineTag_;
			}
			/**
			 * <code>required int32 worldengine_tag = 1;</code>
			 * <p>
			 * <pre>
			 * these two fields have been introduced in Worldengine 0.18.0
			 * </pre>
			 */
			public Builder setWorldengineTag(int value) {
				bitField0_ |= 0x00000001;
				worldengineTag_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>required int32 worldengine_version = 2;</code>
			 */
			public int getWorldengineVersion() {
				return worldengineVersion_;
			}
			/**
			 * <code>required int32 worldengine_version = 2;</code>
			 */
			public Builder setWorldengineVersion(int value) {
				bitField0_ |= 0x00000002;
				worldengineVersion_ = value;
				onChanged();
				return this;
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public boolean hasBiome() {
				return ((bitField0_ & 0x00001000) == 0x00001000);
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public boolean hasGenerationData() {
				return ((bitField1_ & 0x00000001) == 0x00000001);
			}
			/**
			 * <code>required int32 height = 5;</code>
			 */
			public boolean hasHeight() {
				return ((bitField0_ & 0x00000010) == 0x00000010);
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public boolean hasHeightMapData() {
				return ((bitField0_ & 0x00000020) == 0x00000020);
			}
			/**
			 * <code>required double heightMapTh_hill = 9;</code>
			 */
			public boolean hasHeightMapThHill() {
				return ((bitField0_ & 0x00000100) == 0x00000100);
			}
			/**
			 * <code>required double heightMapTh_plain = 8;</code>
			 */
			public boolean hasHeightMapThPlain() {
				return ((bitField0_ & 0x00000080) == 0x00000080);
			}
			/**
			 * <code>required double heightMapTh_sea = 7;</code>
			 */
			public boolean hasHeightMapThSea() {
				return ((bitField0_ & 0x00000040) == 0x00000040);
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public boolean hasHumidity() {
				return ((bitField0_ & 0x00002000) == 0x00002000);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public boolean hasIcecap() {
				return ((bitField1_ & 0x00000008) == 0x00000008);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public boolean hasIrrigation() {
				return ((bitField0_ & 0x00004000) == 0x00004000);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public boolean hasLakemap() {
				return ((bitField1_ & 0x00000002) == 0x00000002);
			}
			/**
			 * <code>required string name = 3;</code>
			 */
			public boolean hasName() {
				return ((bitField0_ & 0x00000004) == 0x00000004);
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public boolean hasOcean() {
				return ((bitField0_ & 0x00000400) == 0x00000400);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public boolean hasPermeabilityData() {
				return ((bitField0_ & 0x00008000) == 0x00008000);
			}
			/**
			 * <code>optional double permeability_low = 17;</code>
			 */
			public boolean hasPermeabilityLow() {
				return ((bitField0_ & 0x00010000) == 0x00010000);
			}
			/**
			 * <code>optional double permeability_med = 18;</code>
			 */
			public boolean hasPermeabilityMed() {
				return ((bitField0_ & 0x00020000) == 0x00020000);
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public boolean hasPlates() {
				return ((bitField0_ & 0x00000200) == 0x00000200);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public boolean hasPrecipitationData() {
				return ((bitField0_ & 0x00400000) == 0x00400000);
			}
			/**
			 * <code>optional double precipitation_low = 24;</code>
			 */
			public boolean hasPrecipitationLow() {
				return ((bitField0_ & 0x00800000) == 0x00800000);
			}
			/**
			 * <code>optional double precipitation_med = 25;</code>
			 */
			public boolean hasPrecipitationMed() {
				return ((bitField0_ & 0x01000000) == 0x01000000);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public boolean hasRivermap() {
				return ((bitField1_ & 0x00000004) == 0x00000004);
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public boolean hasSeaDepth() {
				return ((bitField0_ & 0x00000800) == 0x00000800);
			}
			/**
			 * <code>optional double temperature_alpine = 28;</code>
			 */
			public boolean hasTemperatureAlpine() {
				return ((bitField0_ & 0x08000000) == 0x08000000);
			}
			/**
			 * <code>optional double temperature_boreal = 29;</code>
			 */
			public boolean hasTemperatureBoreal() {
				return ((bitField0_ & 0x10000000) == 0x10000000);
			}
			/**
			 * <code>optional double temperature_cool = 30;</code>
			 */
			public boolean hasTemperatureCool() {
				return ((bitField0_ & 0x20000000) == 0x20000000);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public boolean hasTemperatureData() {
				return ((bitField0_ & 0x02000000) == 0x02000000);
			}
			/**
			 * <code>optional double temperature_polar = 27;</code>
			 */
			public boolean hasTemperaturePolar() {
				return ((bitField0_ & 0x04000000) == 0x04000000);
			}
			/**
			 * <code>optional double temperature_subtropical = 32;</code>
			 */
			public boolean hasTemperatureSubtropical() {
				return ((bitField0_ & 0x80000000) == 0x80000000);
			}
			/**
			 * <code>optional double temperature_warm = 31;</code>
			 */
			public boolean hasTemperatureWarm() {
				return ((bitField0_ & 0x40000000) == 0x40000000);
			}
			/**
			 * <code>optional double watermap_creek = 20;</code>
			 */
			public boolean hasWatermapCreek() {
				return ((bitField0_ & 0x00080000) == 0x00080000);
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public boolean hasWatermapData() {
				return ((bitField0_ & 0x00040000) == 0x00040000);
			}
			/**
			 * <code>optional double watermap_mainriver = 22;</code>
			 */
			public boolean hasWatermapMainriver() {
				return ((bitField0_ & 0x00200000) == 0x00200000);
			}
			/**
			 * <code>optional double watermap_river = 21;</code>
			 */
			public boolean hasWatermapRiver() {
				return ((bitField0_ & 0x00100000) == 0x00100000);
			}
			/**
			 * <code>required int32 width = 4;</code>
			 */
			public boolean hasWidth() {
				return ((bitField0_ & 0x00000008) == 0x00000008);
			}
			/**
			 * <code>required int32 worldengine_tag = 1;</code>
			 * <p>
			 * <pre>
			 * these two fields have been introduced in Worldengine 0.18.0
			 * </pre>
			 */
			public boolean hasWorldengineTag() {
				return ((bitField0_ & 0x00000001) == 0x00000001);
			}
			/**
			 * <code>required int32 worldengine_version = 2;</code>
			 */
			public boolean hasWorldengineVersion() {
				return ((bitField0_ & 0x00000002) == 0x00000002);
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.class, WorldOuterClass.World.Builder.class);
			}
			public final boolean isInitialized() {
				if(!hasWorldengineTag()) {
					
					return false;
				}
				if(!hasWorldengineVersion()) {
					
					return false;
				}
				if(!hasName()) {
					
					return false;
				}
				if(!hasWidth()) {
					
					return false;
				}
				if(!hasHeight()) {
					
					return false;
				}
				if(!hasHeightMapData()) {
					
					return false;
				}
				if(!hasHeightMapThSea()) {
					
					return false;
				}
				if(!hasHeightMapThPlain()) {
					
					return false;
				}
				if(!hasHeightMapThHill()) {
					
					return false;
				}
				if(!hasPlates()) {
					
					return false;
				}
				if(!hasOcean()) {
					
					return false;
				}
				if(!hasSeaDepth()) {
					
					return false;
				}
				if(hasHumidity()) {
					if(!getHumidity().isInitialized()) {
						
						return false;
					}
				}
				return true;
			}
			private void maybeForceBuilderInitialization() {
				if(GeneratedMessage.alwaysUseFieldBuilders) {
					getHeightMapDataFieldBuilder();
					getPlatesFieldBuilder();
					getOceanFieldBuilder();
					getSeaDepthFieldBuilder();
					getBiomeFieldBuilder();
					getHumidityFieldBuilder();
					getIrrigationFieldBuilder();
					getPermeabilityDataFieldBuilder();
					getWatermapDataFieldBuilder();
					getPrecipitationDataFieldBuilder();
					getTemperatureDataFieldBuilder();
					getGenerationDataFieldBuilder();
					getLakemapFieldBuilder();
					getRivermapFieldBuilder();
					getIcecapFieldBuilder();
				}
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public Builder mergeBiome(WorldOuterClass.World.IntegerMatrix value) {
				if(biomeBuilder_ == null) {
					if(((bitField0_ & 0x00001000) == 0x00001000) && biome_ != WorldOuterClass.World.IntegerMatrix.getDefaultInstance()) {
						biome_ = WorldOuterClass.World.IntegerMatrix.newBuilder(biome_).mergeFrom(value).buildPartial();
					} else {
						biome_ = value;
					}
					onChanged();
				} else {
					biomeBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00001000;
				return this;
			}
			public Builder mergeFrom(Message other) {
				if(other instanceof WorldOuterClass.World) {
					return mergeFrom((WorldOuterClass.World) other);
				} else {
					super.mergeFrom(other);
					return this;
				}
			}
			public Builder mergeFrom(WorldOuterClass.World other) {
				if(other == WorldOuterClass.World.getDefaultInstance()) {
					return this;
				}
				if(other.hasWorldengineTag()) {
					setWorldengineTag(other.getWorldengineTag());
				}
				if(other.hasWorldengineVersion()) {
					setWorldengineVersion(other.getWorldengineVersion());
				}
				if(other.hasName()) {
					bitField0_ |= 0x00000004;
					name_ = other.name_;
					onChanged();
				}
				if(other.hasWidth()) {
					setWidth(other.getWidth());
				}
				if(other.hasHeight()) {
					setHeight(other.getHeight());
				}
				if(other.hasHeightMapData()) {
					mergeHeightMapData(other.getHeightMapData());
				}
				if(other.hasHeightMapThSea()) {
					setHeightMapThSea(other.getHeightMapThSea());
				}
				if(other.hasHeightMapThPlain()) {
					setHeightMapThPlain(other.getHeightMapThPlain());
				}
				if(other.hasHeightMapThHill()) {
					setHeightMapThHill(other.getHeightMapThHill());
				}
				if(other.hasPlates()) {
					mergePlates(other.getPlates());
				}
				if(other.hasOcean()) {
					mergeOcean(other.getOcean());
				}
				if(other.hasSeaDepth()) {
					mergeSeaDepth(other.getSeaDepth());
				}
				if(other.hasBiome()) {
					mergeBiome(other.getBiome());
				}
				if(other.hasHumidity()) {
					mergeHumidity(other.getHumidity());
				}
				if(other.hasIrrigation()) {
					mergeIrrigation(other.getIrrigation());
				}
				if(other.hasPermeabilityData()) {
					mergePermeabilityData(other.getPermeabilityData());
				}
				if(other.hasPermeabilityLow()) {
					setPermeabilityLow(other.getPermeabilityLow());
				}
				if(other.hasPermeabilityMed()) {
					setPermeabilityMed(other.getPermeabilityMed());
				}
				if(other.hasWatermapData()) {
					mergeWatermapData(other.getWatermapData());
				}
				if(other.hasWatermapCreek()) {
					setWatermapCreek(other.getWatermapCreek());
				}
				if(other.hasWatermapRiver()) {
					setWatermapRiver(other.getWatermapRiver());
				}
				if(other.hasWatermapMainriver()) {
					setWatermapMainriver(other.getWatermapMainriver());
				}
				if(other.hasPrecipitationData()) {
					mergePrecipitationData(other.getPrecipitationData());
				}
				if(other.hasPrecipitationLow()) {
					setPrecipitationLow(other.getPrecipitationLow());
				}
				if(other.hasPrecipitationMed()) {
					setPrecipitationMed(other.getPrecipitationMed());
				}
				if(other.hasTemperatureData()) {
					mergeTemperatureData(other.getTemperatureData());
				}
				if(other.hasTemperaturePolar()) {
					setTemperaturePolar(other.getTemperaturePolar());
				}
				if(other.hasTemperatureAlpine()) {
					setTemperatureAlpine(other.getTemperatureAlpine());
				}
				if(other.hasTemperatureBoreal()) {
					setTemperatureBoreal(other.getTemperatureBoreal());
				}
				if(other.hasTemperatureCool()) {
					setTemperatureCool(other.getTemperatureCool());
				}
				if(other.hasTemperatureWarm()) {
					setTemperatureWarm(other.getTemperatureWarm());
				}
				if(other.hasTemperatureSubtropical()) {
					setTemperatureSubtropical(other.getTemperatureSubtropical());
				}
				if(other.hasGenerationData()) {
					mergeGenerationData(other.getGenerationData());
				}
				if(other.hasLakemap()) {
					mergeLakemap(other.getLakemap());
				}
				if(other.hasRivermap()) {
					mergeRivermap(other.getRivermap());
				}
				if(other.hasIcecap()) {
					mergeIcecap(other.getIcecap());
				}
				this.mergeUnknownFields(other.getUnknownFields());
				return this;
			}
			public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				WorldOuterClass.World parsedMessage = null;
				try {
					parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
				} catch (InvalidProtocolBufferException e) {
					parsedMessage = (WorldOuterClass.World) e.getUnfinishedMessage();
					throw e;
				} finally {
					if(parsedMessage != null) {
						mergeFrom(parsedMessage);
					}
				}
				return this;
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public Builder mergeGenerationData(WorldOuterClass.World.GenerationData value) {
				if(generationDataBuilder_ == null) {
					if(((bitField1_ & 0x00000001) == 0x00000001) && generationData_ != WorldOuterClass.World.GenerationData.getDefaultInstance()) {
						generationData_ = WorldOuterClass.World.GenerationData.newBuilder(generationData_).mergeFrom(value).buildPartial();
					} else {
						generationData_ = value;
					}
					onChanged();
				} else {
					generationDataBuilder_.mergeFrom(value);
				}
				bitField1_ |= 0x00000001;
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public Builder mergeHeightMapData(WorldOuterClass.World.DoubleMatrix value) {
				if(heightMapDataBuilder_ == null) {
					if(((bitField0_ & 0x00000020) == 0x00000020) && heightMapData_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						heightMapData_ = WorldOuterClass.World.DoubleMatrix.newBuilder(heightMapData_).mergeFrom(value).buildPartial();
					} else {
						heightMapData_ = value;
					}
					onChanged();
				} else {
					heightMapDataBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00000020;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public Builder mergeHumidity(WorldOuterClass.World.DoubleMatrixWithQuantiles value) {
				if(humidityBuilder_ == null) {
					if(((bitField0_ & 0x00002000) == 0x00002000) && humidity_ != WorldOuterClass.World.DoubleMatrixWithQuantiles.getDefaultInstance()) {
						humidity_ = WorldOuterClass.World.DoubleMatrixWithQuantiles.newBuilder(humidity_).mergeFrom(value).buildPartial();
					} else {
						humidity_ = value;
					}
					onChanged();
				} else {
					humidityBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00002000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public Builder mergeIcecap(WorldOuterClass.World.DoubleMatrix value) {
				if(icecapBuilder_ == null) {
					if(((bitField1_ & 0x00000008) == 0x00000008) && icecap_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						icecap_ = WorldOuterClass.World.DoubleMatrix.newBuilder(icecap_).mergeFrom(value).buildPartial();
					} else {
						icecap_ = value;
					}
					onChanged();
				} else {
					icecapBuilder_.mergeFrom(value);
				}
				bitField1_ |= 0x00000008;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public Builder mergeIrrigation(WorldOuterClass.World.DoubleMatrix value) {
				if(irrigationBuilder_ == null) {
					if(((bitField0_ & 0x00004000) == 0x00004000) && irrigation_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						irrigation_ = WorldOuterClass.World.DoubleMatrix.newBuilder(irrigation_).mergeFrom(value).buildPartial();
					} else {
						irrigation_ = value;
					}
					onChanged();
				} else {
					irrigationBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00004000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public Builder mergeLakemap(WorldOuterClass.World.DoubleMatrix value) {
				if(lakemapBuilder_ == null) {
					if(((bitField1_ & 0x00000002) == 0x00000002) && lakemap_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						lakemap_ = WorldOuterClass.World.DoubleMatrix.newBuilder(lakemap_).mergeFrom(value).buildPartial();
					} else {
						lakemap_ = value;
					}
					onChanged();
				} else {
					lakemapBuilder_.mergeFrom(value);
				}
				bitField1_ |= 0x00000002;
				return this;
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public Builder mergeOcean(WorldOuterClass.World.BooleanMatrix value) {
				if(oceanBuilder_ == null) {
					if(((bitField0_ & 0x00000400) == 0x00000400) && ocean_ != WorldOuterClass.World.BooleanMatrix.getDefaultInstance()) {
						ocean_ = WorldOuterClass.World.BooleanMatrix.newBuilder(ocean_).mergeFrom(value).buildPartial();
					} else {
						ocean_ = value;
					}
					onChanged();
				} else {
					oceanBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00000400;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public Builder mergePermeabilityData(WorldOuterClass.World.DoubleMatrix value) {
				if(permeabilityDataBuilder_ == null) {
					if(((bitField0_ & 0x00008000) == 0x00008000) && permeabilityData_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						permeabilityData_ = WorldOuterClass.World.DoubleMatrix.newBuilder(permeabilityData_).mergeFrom(value).buildPartial();
					} else {
						permeabilityData_ = value;
					}
					onChanged();
				} else {
					permeabilityDataBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00008000;
				return this;
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public Builder mergePlates(WorldOuterClass.World.IntegerMatrix value) {
				if(platesBuilder_ == null) {
					if(((bitField0_ & 0x00000200) == 0x00000200) && plates_ != WorldOuterClass.World.IntegerMatrix.getDefaultInstance()) {
						plates_ = WorldOuterClass.World.IntegerMatrix.newBuilder(plates_).mergeFrom(value).buildPartial();
					} else {
						plates_ = value;
					}
					onChanged();
				} else {
					platesBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00000200;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public Builder mergePrecipitationData(WorldOuterClass.World.DoubleMatrix value) {
				if(precipitationDataBuilder_ == null) {
					if(((bitField0_ & 0x00400000) == 0x00400000) && precipitationData_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						precipitationData_ = WorldOuterClass.World.DoubleMatrix.newBuilder(precipitationData_).mergeFrom(value).buildPartial();
					} else {
						precipitationData_ = value;
					}
					onChanged();
				} else {
					precipitationDataBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00400000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public Builder mergeRivermap(WorldOuterClass.World.DoubleMatrix value) {
				if(rivermapBuilder_ == null) {
					if(((bitField1_ & 0x00000004) == 0x00000004) && rivermap_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						rivermap_ = WorldOuterClass.World.DoubleMatrix.newBuilder(rivermap_).mergeFrom(value).buildPartial();
					} else {
						rivermap_ = value;
					}
					onChanged();
				} else {
					rivermapBuilder_.mergeFrom(value);
				}
				bitField1_ |= 0x00000004;
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public Builder mergeSeaDepth(WorldOuterClass.World.DoubleMatrix value) {
				if(seaDepthBuilder_ == null) {
					if(((bitField0_ & 0x00000800) == 0x00000800) && seaDepth_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						seaDepth_ = WorldOuterClass.World.DoubleMatrix.newBuilder(seaDepth_).mergeFrom(value).buildPartial();
					} else {
						seaDepth_ = value;
					}
					onChanged();
				} else {
					seaDepthBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00000800;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public Builder mergeTemperatureData(WorldOuterClass.World.DoubleMatrix value) {
				if(temperatureDataBuilder_ == null) {
					if(((bitField0_ & 0x02000000) == 0x02000000) && temperatureData_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						temperatureData_ = WorldOuterClass.World.DoubleMatrix.newBuilder(temperatureData_).mergeFrom(value).buildPartial();
					} else {
						temperatureData_ = value;
					}
					onChanged();
				} else {
					temperatureDataBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x02000000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public Builder mergeWatermapData(WorldOuterClass.World.DoubleMatrix value) {
				if(watermapDataBuilder_ == null) {
					if(((bitField0_ & 0x00040000) == 0x00040000) && watermapData_ != WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						watermapData_ = WorldOuterClass.World.DoubleMatrix.newBuilder(watermapData_).mergeFrom(value).buildPartial();
					} else {
						watermapData_ = value;
					}
					onChanged();
				} else {
					watermapDataBuilder_.mergeFrom(value);
				}
				bitField0_ |= 0x00040000;
				return this;
			}
			/**
			 * <code>optional .World.World.IntegerMatrix biome = 13;</code>
			 * <p>
			 * <pre>
			 * Biome
			 * </pre>
			 */
			public Builder setBiome(WorldOuterClass.World.IntegerMatrix.Builder builderForValue) {
				if(biomeBuilder_ == null) {
					biome_ = builderForValue.build();
					onChanged();
				} else {
					biomeBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00001000;
				return this;
			}
			/**
			 * <code>optional .World.World.GenerationData generationData = 33;</code>
			 * <p>
			 * <pre>
			 * Data about generation:
			 * introduced in v0.5.3
			 * this is optional for backward compatibility reasons
			 * </pre>
			 */
			public Builder setGenerationData(WorldOuterClass.World.GenerationData.Builder builderForValue) {
				if(generationDataBuilder_ == null) {
					generationData_ = builderForValue.build();
					onChanged();
				} else {
					generationDataBuilder_.setMessage(builderForValue.build());
				}
				bitField1_ |= 0x00000001;
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix heightMapData = 6;</code>
			 * <p>
			 * <pre>
			 * Elevation
			 * </pre>
			 */
			public Builder setHeightMapData(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(heightMapDataBuilder_ == null) {
					heightMapData_ = builderForValue.build();
					onChanged();
				} else {
					heightMapDataBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00000020;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrixWithQuantiles humidity = 14;</code>
			 * <p>
			 * <pre>
			 * Humidity
			 * </pre>
			 */
			public Builder setHumidity(WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder builderForValue) {
				if(humidityBuilder_ == null) {
					humidity_ = builderForValue.build();
					onChanged();
				} else {
					humidityBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00002000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix icecap = 36;</code>
			 * <p>
			 * <pre>
			 * Ice-caps
			 * </pre>
			 */
			public Builder setIcecap(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(icecapBuilder_ == null) {
					icecap_ = builderForValue.build();
					onChanged();
				} else {
					icecapBuilder_.setMessage(builderForValue.build());
				}
				bitField1_ |= 0x00000008;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix irrigation = 15;</code>
			 * <p>
			 * <pre>
			 * Irrigation
			 * </pre>
			 */
			public Builder setIrrigation(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(irrigationBuilder_ == null) {
					irrigation_ = builderForValue.build();
					onChanged();
				} else {
					irrigationBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00004000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix lakemap = 34;</code>
			 */
			public Builder setLakemap(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(lakemapBuilder_ == null) {
					lakemap_ = builderForValue.build();
					onChanged();
				} else {
					lakemapBuilder_.setMessage(builderForValue.build());
				}
				bitField1_ |= 0x00000002;
				return this;
			}
			/**
			 * <code>required .World.World.BooleanMatrix ocean = 11;</code>
			 * <p>
			 * <pre>
			 * Ocean
			 * </pre>
			 */
			public Builder setOcean(WorldOuterClass.World.BooleanMatrix.Builder builderForValue) {
				if(oceanBuilder_ == null) {
					ocean_ = builderForValue.build();
					onChanged();
				} else {
					oceanBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00000400;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix permeabilityData = 16;</code>
			 * <p>
			 * <pre>
			 * Permeability
			 * </pre>
			 */
			public Builder setPermeabilityData(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(permeabilityDataBuilder_ == null) {
					permeabilityData_ = builderForValue.build();
					onChanged();
				} else {
					permeabilityDataBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00008000;
				return this;
			}
			/**
			 * <code>required .World.World.IntegerMatrix plates = 10;</code>
			 * <p>
			 * <pre>
			 * Plates
			 * </pre>
			 */
			public Builder setPlates(WorldOuterClass.World.IntegerMatrix.Builder builderForValue) {
				if(platesBuilder_ == null) {
					plates_ = builderForValue.build();
					onChanged();
				} else {
					platesBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00000200;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix precipitationData = 23;</code>
			 * <p>
			 * <pre>
			 * Precipitation
			 * </pre>
			 */
			public Builder setPrecipitationData(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(precipitationDataBuilder_ == null) {
					precipitationData_ = builderForValue.build();
					onChanged();
				} else {
					precipitationDataBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00400000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix rivermap = 35;</code>
			 */
			public Builder setRivermap(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(rivermapBuilder_ == null) {
					rivermap_ = builderForValue.build();
					onChanged();
				} else {
					rivermapBuilder_.setMessage(builderForValue.build());
				}
				bitField1_ |= 0x00000004;
				return this;
			}
			/**
			 * <code>required .World.World.DoubleMatrix sea_depth = 12;</code>
			 */
			public Builder setSeaDepth(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(seaDepthBuilder_ == null) {
					seaDepth_ = builderForValue.build();
					onChanged();
				} else {
					seaDepthBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00000800;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix temperatureData = 26;</code>
			 * <p>
			 * <pre>
			 * Temperature
			 * </pre>
			 */
			public Builder setTemperatureData(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(temperatureDataBuilder_ == null) {
					temperatureData_ = builderForValue.build();
					onChanged();
				} else {
					temperatureDataBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x02000000;
				return this;
			}
			/**
			 * <code>optional .World.World.DoubleMatrix watermapData = 19;</code>
			 * <p>
			 * <pre>
			 * Watermap
			 * </pre>
			 */
			public Builder setWatermapData(WorldOuterClass.World.DoubleMatrix.Builder builderForValue) {
				if(watermapDataBuilder_ == null) {
					watermapData_ = builderForValue.build();
					onChanged();
				} else {
					watermapDataBuilder_.setMessage(builderForValue.build());
				}
				bitField0_ |= 0x00040000;
				return this;
			}
			
			// @@protoc_insertion_point(builder_scope:World.World)
		}
		
		/**
		 * Protobuf type {@code World.World.ByteRow}
		 */
		public static final class ByteRow extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.ByteRow)
				ByteRowOrBuilder {
			public static final int CELLS_FIELD_NUMBER = 1;
			private static final ByteRow defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<ByteRow> PARSER = new AbstractParser<ByteRow>() {
				public ByteRow parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new ByteRow(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new ByteRow(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<java.lang.Integer> cells_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use ByteRow.newBuilder() to construct.
			private ByteRow(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private ByteRow(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private ByteRow(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 8: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									cells_ = new java.util.ArrayList<java.lang.Integer>();
									mutable_bitField0_ |= 0x00000001;
								}
								cells_.add(input.readInt32());
								break;
							}
							case 10: {
								int length = input.readRawVarint32();
								int limit = input.pushLimit(length);
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
									cells_ = new java.util.ArrayList<java.lang.Integer>();
									mutable_bitField0_ |= 0x00000001;
								}
								while(input.getBytesUntilLimit() > 0) {
									cells_.add(input.readInt32());
								}
								input.popLimit(limit);
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static ByteRow getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_ByteRow_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.ByteRow prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.ByteRow parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.ByteRow parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.ByteRow parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			public int getCells(int index) {
				return cells_.get(index);
			}
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			public int getCellsCount() {
				return cells_.size();
			}
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			public java.util.List<java.lang.Integer> getCellsList() {
				return cells_;
			}
			public ByteRow getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<ByteRow> getParserForType() {
				return PARSER;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				{
					int dataSize = 0;
					for(int i = 0; i < cells_.size(); i++) {
						dataSize += CodedOutputStream.computeInt32SizeNoTag(cells_.get(i));
					}
					size += dataSize;
					size += 1 * getCellsList().size();
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				cells_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_ByteRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.ByteRow.class, WorldOuterClass.World.ByteRow.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < cells_.size(); i++) {
					output.writeInt32(1, cells_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.ByteRow}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.ByteRow)
					WorldOuterClass.World.ByteRowOrBuilder {
				private int bitField0_;
				private java.util.List<java.lang.Integer> cells_ = java.util.Collections.emptyList();
				// Construct using WorldOuterClass.World.ByteRow.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_ByteRow_descriptor;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder addAllCells(java.lang.Iterable<? extends java.lang.Integer> values) {
					ensureCellsIsMutable();
					AbstractMessageLite.Builder.addAll(values, cells_);
					onChanged();
					return this;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder addCells(int value) {
					ensureCellsIsMutable();
					cells_.add(value);
					onChanged();
					return this;
				}
				public WorldOuterClass.World.ByteRow build() {
					WorldOuterClass.World.ByteRow result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.ByteRow buildPartial() {
					WorldOuterClass.World.ByteRow result = new WorldOuterClass.World.ByteRow(this);
					int from_bitField0_ = bitField0_;
					if(((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
						bitField0_ = (bitField0_ & ~0x00000001);
					}
					result.cells_ = cells_;
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					return this;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder clearCells() {
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					onChanged();
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureCellsIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = new java.util.ArrayList<java.lang.Integer>(cells_);
						bitField0_ |= 0x00000001;
					}
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public int getCells(int index) {
					return cells_.get(index);
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public int getCellsCount() {
					return cells_.size();
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public java.util.List<java.lang.Integer> getCellsList() {
					return java.util.Collections.unmodifiableList(cells_);
				}
				public WorldOuterClass.World.ByteRow getDefaultInstanceForType() {
					return WorldOuterClass.World.ByteRow.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_ByteRow_descriptor;
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_ByteRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.ByteRow.class, WorldOuterClass.World.ByteRow.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.ByteRow) {
						return mergeFrom((WorldOuterClass.World.ByteRow) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.ByteRow other) {
					if(other == WorldOuterClass.World.ByteRow.getDefaultInstance()) {
						return this;
					}
					if(!other.cells_.isEmpty()) {
						if(cells_.isEmpty()) {
							cells_ = other.cells_;
							bitField0_ = (bitField0_ & ~0x00000001);
						} else {
							ensureCellsIsMutable();
							cells_.addAll(other.cells_);
						}
						onChanged();
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.ByteRow parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.ByteRow) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder setCells(int index, int value) {
					ensureCellsIsMutable();
					cells_.set(index, value);
					onChanged();
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.ByteRow)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.ByteRow)
		}
		
		/**
		 * Protobuf type {@code World.World.DoubleMatrix}
		 */
		public static final class DoubleMatrix extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.DoubleMatrix)
				DoubleMatrixOrBuilder {
			public static final int ROWS_FIELD_NUMBER = 1;
			private static final DoubleMatrix defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<DoubleMatrix> PARSER = new AbstractParser<DoubleMatrix>() {
				public DoubleMatrix parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new DoubleMatrix(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new DoubleMatrix(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<WorldOuterClass.World.DoubleRow> rows_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use DoubleMatrix.newBuilder() to construct.
			private DoubleMatrix(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private DoubleMatrix(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private DoubleMatrix(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 10: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									rows_ = new java.util.ArrayList<WorldOuterClass.World.DoubleRow>();
									mutable_bitField0_ |= 0x00000001;
								}
								rows_.add(input.readMessage(WorldOuterClass.World.DoubleRow.PARSER, extensionRegistry));
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						rows_ = java.util.Collections.unmodifiableList(rows_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static DoubleMatrix getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_DoubleMatrix_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.DoubleMatrix prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.DoubleMatrix parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.DoubleMatrix parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleMatrix parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public DoubleMatrix getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<DoubleMatrix> getParserForType() {
				return PARSER;
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			public WorldOuterClass.World.DoubleRow getRows(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			public int getRowsCount() {
				return rows_.size();
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			public java.util.List<WorldOuterClass.World.DoubleRow> getRowsList() {
				return rows_;
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			public WorldOuterClass.World.DoubleRowOrBuilder getRowsOrBuilder(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 1;</code>
			 */
			public java.util.List<? extends WorldOuterClass.World.DoubleRowOrBuilder> getRowsOrBuilderList() {
				return rows_;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				for(int i = 0; i < rows_.size(); i++) {
					size += CodedOutputStream.computeMessageSize(1, rows_.get(i));
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				rows_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_DoubleMatrix_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleMatrix.class, WorldOuterClass.World.DoubleMatrix.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < rows_.size(); i++) {
					output.writeMessage(1, rows_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.DoubleMatrix}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.DoubleMatrix)
					WorldOuterClass.World.DoubleMatrixOrBuilder {
				private int bitField0_;
				private java.util.List<WorldOuterClass.World.DoubleRow> rows_ = java.util.Collections.emptyList();
				private RepeatedFieldBuilder<WorldOuterClass.World.DoubleRow, WorldOuterClass.World.DoubleRow.Builder, WorldOuterClass.World.DoubleRowOrBuilder> rowsBuilder_;
				// Construct using WorldOuterClass.World.DoubleMatrix.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_DoubleMatrix_descriptor;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder addAllRows(java.lang.Iterable<? extends WorldOuterClass.World.DoubleRow> values) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						AbstractMessageLite.Builder.addAll(values, rows_);
						onChanged();
					} else {
						rowsBuilder_.addAllMessages(values);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder addRows(WorldOuterClass.World.DoubleRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.DoubleRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(index, value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder addRows(WorldOuterClass.World.DoubleRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.DoubleRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public WorldOuterClass.World.DoubleRow.Builder addRowsBuilder() {
					return getRowsFieldBuilder().addBuilder(WorldOuterClass.World.DoubleRow.getDefaultInstance());
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public WorldOuterClass.World.DoubleRow.Builder addRowsBuilder(int index) {
					return getRowsFieldBuilder().addBuilder(index, WorldOuterClass.World.DoubleRow.getDefaultInstance());
				}
				public WorldOuterClass.World.DoubleMatrix build() {
					WorldOuterClass.World.DoubleMatrix result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.DoubleMatrix buildPartial() {
					WorldOuterClass.World.DoubleMatrix result = new WorldOuterClass.World.DoubleMatrix(this);
					int from_bitField0_ = bitField0_;
					if(rowsBuilder_ == null) {
						if(((bitField0_ & 0x00000001) == 0x00000001)) {
							rows_ = java.util.Collections.unmodifiableList(rows_);
							bitField0_ = (bitField0_ & ~0x00000001);
						}
						result.rows_ = rows_;
					} else {
						result.rows_ = rowsBuilder_.build();
					}
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder clearRows() {
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
						onChanged();
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureRowsIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						rows_ = new java.util.ArrayList<WorldOuterClass.World.DoubleRow>(rows_);
						bitField0_ |= 0x00000001;
					}
				}
				public WorldOuterClass.World.DoubleMatrix getDefaultInstanceForType() {
					return WorldOuterClass.World.DoubleMatrix.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_DoubleMatrix_descriptor;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public WorldOuterClass.World.DoubleRow getRows(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessage(index);
					}
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public WorldOuterClass.World.DoubleRow.Builder getRowsBuilder(int index) {
					return getRowsFieldBuilder().getBuilder(index);
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.DoubleRow.Builder> getRowsBuilderList() {
					return getRowsFieldBuilder().getBuilderList();
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public int getRowsCount() {
					if(rowsBuilder_ == null) {
						return rows_.size();
					} else {
						return rowsBuilder_.getCount();
					}
				}
				private RepeatedFieldBuilder<WorldOuterClass.World.DoubleRow, WorldOuterClass.World.DoubleRow.Builder, WorldOuterClass.World.DoubleRowOrBuilder> getRowsFieldBuilder() {
					if(rowsBuilder_ == null) {
						rowsBuilder_ = new RepeatedFieldBuilder<WorldOuterClass.World.DoubleRow, WorldOuterClass.World.DoubleRow.Builder, WorldOuterClass.World.DoubleRowOrBuilder>(rows_, ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(), isClean());
						rows_ = null;
					}
					return rowsBuilder_;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.DoubleRow> getRowsList() {
					if(rowsBuilder_ == null) {
						return java.util.Collections.unmodifiableList(rows_);
					} else {
						return rowsBuilder_.getMessageList();
					}
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public WorldOuterClass.World.DoubleRowOrBuilder getRowsOrBuilder(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessageOrBuilder(index);
					}
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public java.util.List<? extends WorldOuterClass.World.DoubleRowOrBuilder> getRowsOrBuilderList() {
					if(rowsBuilder_ != null) {
						return rowsBuilder_.getMessageOrBuilderList();
					} else {
						return java.util.Collections.unmodifiableList(rows_);
					}
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_DoubleMatrix_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleMatrix.class, WorldOuterClass.World.DoubleMatrix.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
						getRowsFieldBuilder();
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.DoubleMatrix) {
						return mergeFrom((WorldOuterClass.World.DoubleMatrix) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.DoubleMatrix other) {
					if(other == WorldOuterClass.World.DoubleMatrix.getDefaultInstance()) {
						return this;
					}
					if(rowsBuilder_ == null) {
						if(!other.rows_.isEmpty()) {
							if(rows_.isEmpty()) {
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000001);
							} else {
								ensureRowsIsMutable();
								rows_.addAll(other.rows_);
							}
							onChanged();
						}
					} else {
						if(!other.rows_.isEmpty()) {
							if(rowsBuilder_.isEmpty()) {
								rowsBuilder_.dispose();
								rowsBuilder_ = null;
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000001);
								rowsBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? getRowsFieldBuilder() : null;
							} else {
								rowsBuilder_.addAllMessages(other.rows_);
							}
						}
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.DoubleMatrix parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.DoubleMatrix) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder removeRows(int index) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.remove(index);
						onChanged();
					} else {
						rowsBuilder_.remove(index);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.DoubleRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.set(index, value);
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 1;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.DoubleRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.set(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, builderForValue.build());
					}
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.DoubleMatrix)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.DoubleMatrix)
		}
		
		/**
		 * Protobuf type {@code World.World.DoubleMatrixWithQuantiles}
		 */
		public static final class DoubleMatrixWithQuantiles extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.DoubleMatrixWithQuantiles)
				DoubleMatrixWithQuantilesOrBuilder,
				DoubleMatrixOrBuilder {
			public static final int QUANTILES_FIELD_NUMBER = 1;
			public static final int ROWS_FIELD_NUMBER = 2;
			private static final DoubleMatrixWithQuantiles defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<DoubleMatrixWithQuantiles> PARSER = new AbstractParser<DoubleMatrixWithQuantiles>() {
				public DoubleMatrixWithQuantiles parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new DoubleMatrixWithQuantiles(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new DoubleMatrixWithQuantiles(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<WorldOuterClass.World.DoubleQuantile> quantiles_;
			private java.util.List<WorldOuterClass.World.DoubleRow> rows_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use DoubleMatrixWithQuantiles.newBuilder() to construct.
			private DoubleMatrixWithQuantiles(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private DoubleMatrixWithQuantiles(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private DoubleMatrixWithQuantiles(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 10: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									quantiles_ = new java.util.ArrayList<WorldOuterClass.World.DoubleQuantile>();
									mutable_bitField0_ |= 0x00000001;
								}
								quantiles_.add(input.readMessage(WorldOuterClass.World.DoubleQuantile.PARSER, extensionRegistry));
								break;
							}
							case 18: {
								if(!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
									rows_ = new java.util.ArrayList<WorldOuterClass.World.DoubleRow>();
									mutable_bitField0_ |= 0x00000002;
								}
								rows_.add(input.readMessage(WorldOuterClass.World.DoubleRow.PARSER, extensionRegistry));
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						quantiles_ = java.util.Collections.unmodifiableList(quantiles_);
					}
					if(((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
						rows_ = java.util.Collections.unmodifiableList(rows_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static DoubleMatrixWithQuantiles getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_DoubleMatrixWithQuantiles_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.DoubleMatrixWithQuantiles prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleMatrixWithQuantiles parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public DoubleMatrixWithQuantiles getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<DoubleMatrixWithQuantiles> getParserForType() {
				return PARSER;
			}
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			public WorldOuterClass.World.DoubleQuantile getQuantiles(int index) {
				return quantiles_.get(index);
			}
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			public int getQuantilesCount() {
				return quantiles_.size();
			}
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			public java.util.List<WorldOuterClass.World.DoubleQuantile> getQuantilesList() {
				return quantiles_;
			}
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			public WorldOuterClass.World.DoubleQuantileOrBuilder getQuantilesOrBuilder(int index) {
				return quantiles_.get(index);
			}
			/**
			 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
			 */
			public java.util.List<? extends WorldOuterClass.World.DoubleQuantileOrBuilder> getQuantilesOrBuilderList() {
				return quantiles_;
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			public WorldOuterClass.World.DoubleRow getRows(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			public int getRowsCount() {
				return rows_.size();
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			public java.util.List<WorldOuterClass.World.DoubleRow> getRowsList() {
				return rows_;
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			public WorldOuterClass.World.DoubleRowOrBuilder getRowsOrBuilder(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.DoubleRow rows = 2;</code>
			 */
			public java.util.List<? extends WorldOuterClass.World.DoubleRowOrBuilder> getRowsOrBuilderList() {
				return rows_;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				for(int i = 0; i < quantiles_.size(); i++) {
					size += CodedOutputStream.computeMessageSize(1, quantiles_.get(i));
				}
				for(int i = 0; i < rows_.size(); i++) {
					size += CodedOutputStream.computeMessageSize(2, rows_.get(i));
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				quantiles_ = java.util.Collections.emptyList();
				rows_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_DoubleMatrixWithQuantiles_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleMatrixWithQuantiles.class, WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				for(int i = 0; i < getQuantilesCount(); i++) {
					if(!getQuantiles(i).isInitialized()) {
						memoizedIsInitialized = 0;
						return false;
					}
				}
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < quantiles_.size(); i++) {
					output.writeMessage(1, quantiles_.get(i));
				}
				for(int i = 0; i < rows_.size(); i++) {
					output.writeMessage(2, rows_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.DoubleMatrixWithQuantiles}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.DoubleMatrixWithQuantiles)
					WorldOuterClass.World.DoubleMatrixWithQuantilesOrBuilder {
				private int bitField0_;
				private java.util.List<WorldOuterClass.World.DoubleQuantile> quantiles_ = java.util.Collections.emptyList();
				private RepeatedFieldBuilder<WorldOuterClass.World.DoubleQuantile, WorldOuterClass.World.DoubleQuantile.Builder, WorldOuterClass.World.DoubleQuantileOrBuilder> quantilesBuilder_;
				private java.util.List<WorldOuterClass.World.DoubleRow> rows_ = java.util.Collections.emptyList();
				private RepeatedFieldBuilder<WorldOuterClass.World.DoubleRow, WorldOuterClass.World.DoubleRow.Builder, WorldOuterClass.World.DoubleRowOrBuilder> rowsBuilder_;
				// Construct using WorldOuterClass.World.DoubleMatrixWithQuantiles.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_DoubleMatrixWithQuantiles_descriptor;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder addAllQuantiles(java.lang.Iterable<? extends WorldOuterClass.World.DoubleQuantile> values) {
					if(quantilesBuilder_ == null) {
						ensureQuantilesIsMutable();
						AbstractMessageLite.Builder.addAll(values, quantiles_);
						onChanged();
					} else {
						quantilesBuilder_.addAllMessages(values);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder addAllRows(java.lang.Iterable<? extends WorldOuterClass.World.DoubleRow> values) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						AbstractMessageLite.Builder.addAll(values, rows_);
						onChanged();
					} else {
						rowsBuilder_.addAllMessages(values);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder addQuantiles(WorldOuterClass.World.DoubleQuantile value) {
					if(quantilesBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureQuantilesIsMutable();
						quantiles_.add(value);
						onChanged();
					} else {
						quantilesBuilder_.addMessage(value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder addQuantiles(int index, WorldOuterClass.World.DoubleQuantile value) {
					if(quantilesBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureQuantilesIsMutable();
						quantiles_.add(index, value);
						onChanged();
					} else {
						quantilesBuilder_.addMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder addQuantiles(WorldOuterClass.World.DoubleQuantile.Builder builderForValue) {
					if(quantilesBuilder_ == null) {
						ensureQuantilesIsMutable();
						quantiles_.add(builderForValue.build());
						onChanged();
					} else {
						quantilesBuilder_.addMessage(builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder addQuantiles(int index, WorldOuterClass.World.DoubleQuantile.Builder builderForValue) {
					if(quantilesBuilder_ == null) {
						ensureQuantilesIsMutable();
						quantiles_.add(index, builderForValue.build());
						onChanged();
					} else {
						quantilesBuilder_.addMessage(index, builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public WorldOuterClass.World.DoubleQuantile.Builder addQuantilesBuilder() {
					return getQuantilesFieldBuilder().addBuilder(WorldOuterClass.World.DoubleQuantile.getDefaultInstance());
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public WorldOuterClass.World.DoubleQuantile.Builder addQuantilesBuilder(int index) {
					return getQuantilesFieldBuilder().addBuilder(index, WorldOuterClass.World.DoubleQuantile.getDefaultInstance());
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder addRows(WorldOuterClass.World.DoubleRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.DoubleRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(index, value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder addRows(WorldOuterClass.World.DoubleRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.DoubleRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public WorldOuterClass.World.DoubleRow.Builder addRowsBuilder() {
					return getRowsFieldBuilder().addBuilder(WorldOuterClass.World.DoubleRow.getDefaultInstance());
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public WorldOuterClass.World.DoubleRow.Builder addRowsBuilder(int index) {
					return getRowsFieldBuilder().addBuilder(index, WorldOuterClass.World.DoubleRow.getDefaultInstance());
				}
				public WorldOuterClass.World.DoubleMatrixWithQuantiles build() {
					WorldOuterClass.World.DoubleMatrixWithQuantiles result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.DoubleMatrixWithQuantiles buildPartial() {
					WorldOuterClass.World.DoubleMatrixWithQuantiles result = new WorldOuterClass.World.DoubleMatrixWithQuantiles(this);
					int from_bitField0_ = bitField0_;
					if(quantilesBuilder_ == null) {
						if(((bitField0_ & 0x00000001) == 0x00000001)) {
							quantiles_ = java.util.Collections.unmodifiableList(quantiles_);
							bitField0_ = (bitField0_ & ~0x00000001);
						}
						result.quantiles_ = quantiles_;
					} else {
						result.quantiles_ = quantilesBuilder_.build();
					}
					if(rowsBuilder_ == null) {
						if(((bitField0_ & 0x00000002) == 0x00000002)) {
							rows_ = java.util.Collections.unmodifiableList(rows_);
							bitField0_ = (bitField0_ & ~0x00000002);
						}
						result.rows_ = rows_;
					} else {
						result.rows_ = rowsBuilder_.build();
					}
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					if(quantilesBuilder_ == null) {
						quantiles_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
					} else {
						quantilesBuilder_.clear();
					}
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000002);
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder clearQuantiles() {
					if(quantilesBuilder_ == null) {
						quantiles_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
						onChanged();
					} else {
						quantilesBuilder_.clear();
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder clearRows() {
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000002);
						onChanged();
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureQuantilesIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						quantiles_ = new java.util.ArrayList<WorldOuterClass.World.DoubleQuantile>(quantiles_);
						bitField0_ |= 0x00000001;
					}
				}
				private void ensureRowsIsMutable() {
					if(!((bitField0_ & 0x00000002) == 0x00000002)) {
						rows_ = new java.util.ArrayList<WorldOuterClass.World.DoubleRow>(rows_);
						bitField0_ |= 0x00000002;
					}
				}
				public WorldOuterClass.World.DoubleMatrixWithQuantiles getDefaultInstanceForType() {
					return WorldOuterClass.World.DoubleMatrixWithQuantiles.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_DoubleMatrixWithQuantiles_descriptor;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public WorldOuterClass.World.DoubleQuantile getQuantiles(int index) {
					if(quantilesBuilder_ == null) {
						return quantiles_.get(index);
					} else {
						return quantilesBuilder_.getMessage(index);
					}
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public WorldOuterClass.World.DoubleQuantile.Builder getQuantilesBuilder(int index) {
					return getQuantilesFieldBuilder().getBuilder(index);
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.DoubleQuantile.Builder> getQuantilesBuilderList() {
					return getQuantilesFieldBuilder().getBuilderList();
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public int getQuantilesCount() {
					if(quantilesBuilder_ == null) {
						return quantiles_.size();
					} else {
						return quantilesBuilder_.getCount();
					}
				}
				private RepeatedFieldBuilder<WorldOuterClass.World.DoubleQuantile, WorldOuterClass.World.DoubleQuantile.Builder, WorldOuterClass.World.DoubleQuantileOrBuilder> getQuantilesFieldBuilder() {
					if(quantilesBuilder_ == null) {
						quantilesBuilder_ = new RepeatedFieldBuilder<WorldOuterClass.World.DoubleQuantile, WorldOuterClass.World.DoubleQuantile.Builder, WorldOuterClass.World.DoubleQuantileOrBuilder>(quantiles_, ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(), isClean());
						quantiles_ = null;
					}
					return quantilesBuilder_;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.DoubleQuantile> getQuantilesList() {
					if(quantilesBuilder_ == null) {
						return java.util.Collections.unmodifiableList(quantiles_);
					} else {
						return quantilesBuilder_.getMessageList();
					}
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public WorldOuterClass.World.DoubleQuantileOrBuilder getQuantilesOrBuilder(int index) {
					if(quantilesBuilder_ == null) {
						return quantiles_.get(index);
					} else {
						return quantilesBuilder_.getMessageOrBuilder(index);
					}
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public java.util.List<? extends WorldOuterClass.World.DoubleQuantileOrBuilder> getQuantilesOrBuilderList() {
					if(quantilesBuilder_ != null) {
						return quantilesBuilder_.getMessageOrBuilderList();
					} else {
						return java.util.Collections.unmodifiableList(quantiles_);
					}
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public WorldOuterClass.World.DoubleRow getRows(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessage(index);
					}
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public WorldOuterClass.World.DoubleRow.Builder getRowsBuilder(int index) {
					return getRowsFieldBuilder().getBuilder(index);
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public java.util.List<WorldOuterClass.World.DoubleRow.Builder> getRowsBuilderList() {
					return getRowsFieldBuilder().getBuilderList();
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public int getRowsCount() {
					if(rowsBuilder_ == null) {
						return rows_.size();
					} else {
						return rowsBuilder_.getCount();
					}
				}
				private RepeatedFieldBuilder<WorldOuterClass.World.DoubleRow, WorldOuterClass.World.DoubleRow.Builder, WorldOuterClass.World.DoubleRowOrBuilder> getRowsFieldBuilder() {
					if(rowsBuilder_ == null) {
						rowsBuilder_ = new RepeatedFieldBuilder<WorldOuterClass.World.DoubleRow, WorldOuterClass.World.DoubleRow.Builder, WorldOuterClass.World.DoubleRowOrBuilder>(rows_, ((bitField0_ & 0x00000002) == 0x00000002), getParentForChildren(), isClean());
						rows_ = null;
					}
					return rowsBuilder_;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public java.util.List<WorldOuterClass.World.DoubleRow> getRowsList() {
					if(rowsBuilder_ == null) {
						return java.util.Collections.unmodifiableList(rows_);
					} else {
						return rowsBuilder_.getMessageList();
					}
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public WorldOuterClass.World.DoubleRowOrBuilder getRowsOrBuilder(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessageOrBuilder(index);
					}
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public java.util.List<? extends WorldOuterClass.World.DoubleRowOrBuilder> getRowsOrBuilderList() {
					if(rowsBuilder_ != null) {
						return rowsBuilder_.getMessageOrBuilderList();
					} else {
						return java.util.Collections.unmodifiableList(rows_);
					}
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_DoubleMatrixWithQuantiles_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleMatrixWithQuantiles.class, WorldOuterClass.World.DoubleMatrixWithQuantiles.Builder.class);
				}
				public final boolean isInitialized() {
					for(int i = 0; i < getQuantilesCount(); i++) {
						if(!getQuantiles(i).isInitialized()) {
							
							return false;
						}
					}
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
						getQuantilesFieldBuilder();
						getRowsFieldBuilder();
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.DoubleMatrixWithQuantiles) {
						return mergeFrom((WorldOuterClass.World.DoubleMatrixWithQuantiles) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.DoubleMatrixWithQuantiles other) {
					if(other == WorldOuterClass.World.DoubleMatrixWithQuantiles.getDefaultInstance()) {
						return this;
					}
					if(quantilesBuilder_ == null) {
						if(!other.quantiles_.isEmpty()) {
							if(quantiles_.isEmpty()) {
								quantiles_ = other.quantiles_;
								bitField0_ = (bitField0_ & ~0x00000001);
							} else {
								ensureQuantilesIsMutable();
								quantiles_.addAll(other.quantiles_);
							}
							onChanged();
						}
					} else {
						if(!other.quantiles_.isEmpty()) {
							if(quantilesBuilder_.isEmpty()) {
								quantilesBuilder_.dispose();
								quantilesBuilder_ = null;
								quantiles_ = other.quantiles_;
								bitField0_ = (bitField0_ & ~0x00000001);
								quantilesBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? getQuantilesFieldBuilder() : null;
							} else {
								quantilesBuilder_.addAllMessages(other.quantiles_);
							}
						}
					}
					if(rowsBuilder_ == null) {
						if(!other.rows_.isEmpty()) {
							if(rows_.isEmpty()) {
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000002);
							} else {
								ensureRowsIsMutable();
								rows_.addAll(other.rows_);
							}
							onChanged();
						}
					} else {
						if(!other.rows_.isEmpty()) {
							if(rowsBuilder_.isEmpty()) {
								rowsBuilder_.dispose();
								rowsBuilder_ = null;
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000002);
								rowsBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? getRowsFieldBuilder() : null;
							} else {
								rowsBuilder_.addAllMessages(other.rows_);
							}
						}
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.DoubleMatrixWithQuantiles parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.DoubleMatrixWithQuantiles) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder removeQuantiles(int index) {
					if(quantilesBuilder_ == null) {
						ensureQuantilesIsMutable();
						quantiles_.remove(index);
						onChanged();
					} else {
						quantilesBuilder_.remove(index);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder removeRows(int index) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.remove(index);
						onChanged();
					} else {
						rowsBuilder_.remove(index);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder setQuantiles(int index, WorldOuterClass.World.DoubleQuantile value) {
					if(quantilesBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureQuantilesIsMutable();
						quantiles_.set(index, value);
						onChanged();
					} else {
						quantilesBuilder_.setMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleQuantile quantiles = 1;</code>
				 */
				public Builder setQuantiles(int index, WorldOuterClass.World.DoubleQuantile.Builder builderForValue) {
					if(quantilesBuilder_ == null) {
						ensureQuantilesIsMutable();
						quantiles_.set(index, builderForValue.build());
						onChanged();
					} else {
						quantilesBuilder_.setMessage(index, builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.DoubleRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.set(index, value);
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.DoubleRow rows = 2;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.DoubleRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.set(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, builderForValue.build());
					}
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.DoubleMatrixWithQuantiles)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.DoubleMatrixWithQuantiles)
		}
		
		/**
		 * Protobuf type {@code World.World.DoubleQuantile}
		 */
		public static final class DoubleQuantile extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.DoubleQuantile)
				DoubleQuantileOrBuilder {
			public static final int KEY_FIELD_NUMBER = 1;
			public static final int VALUE_FIELD_NUMBER = 2;
			private static final DoubleQuantile defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<DoubleQuantile> PARSER = new AbstractParser<DoubleQuantile>() {
				public DoubleQuantile parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new DoubleQuantile(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new DoubleQuantile(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private int bitField0_;
			private int key_;
			private double value_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use DoubleQuantile.newBuilder() to construct.
			private DoubleQuantile(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private DoubleQuantile(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private DoubleQuantile(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 8: {
								bitField0_ |= 0x00000001;
								key_ = input.readInt32();
								break;
							}
							case 17: {
								bitField0_ |= 0x00000002;
								value_ = input.readDouble();
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static DoubleQuantile getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_DoubleQuantile_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.DoubleQuantile prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.DoubleQuantile parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.DoubleQuantile parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleQuantile parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public DoubleQuantile getDefaultInstanceForType() {
				return defaultInstance;
			}
			/**
			 * <code>required int32 key = 1;</code>
			 */
			public int getKey() {
				return key_;
			}
			@java.lang.Override
			public Parser<DoubleQuantile> getParserForType() {
				return PARSER;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				if(((bitField0_ & 0x00000001) == 0x00000001)) {
					size += CodedOutputStream.computeInt32Size(1, key_);
				}
				if(((bitField0_ & 0x00000002) == 0x00000002)) {
					size += CodedOutputStream.computeDoubleSize(2, value_);
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			/**
			 * <code>required double value = 2;</code>
			 */
			public double getValue() {
				return value_;
			}
			/**
			 * <code>required int32 key = 1;</code>
			 */
			public boolean hasKey() {
				return ((bitField0_ & 0x00000001) == 0x00000001);
			}
			/**
			 * <code>required double value = 2;</code>
			 */
			public boolean hasValue() {
				return ((bitField0_ & 0x00000002) == 0x00000002);
			}
			private void initFields() {
				key_ = 0;
				value_ = 0D;
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_DoubleQuantile_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleQuantile.class, WorldOuterClass.World.DoubleQuantile.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				if(!hasKey()) {
					memoizedIsInitialized = 0;
					return false;
				}
				if(!hasValue()) {
					memoizedIsInitialized = 0;
					return false;
				}
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				if(((bitField0_ & 0x00000001) == 0x00000001)) {
					output.writeInt32(1, key_);
				}
				if(((bitField0_ & 0x00000002) == 0x00000002)) {
					output.writeDouble(2, value_);
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.DoubleQuantile}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.DoubleQuantile)
					WorldOuterClass.World.DoubleQuantileOrBuilder {
				private int bitField0_;
				private int key_;
				private double value_;
				// Construct using WorldOuterClass.World.DoubleQuantile.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_DoubleQuantile_descriptor;
				}
				public WorldOuterClass.World.DoubleQuantile build() {
					WorldOuterClass.World.DoubleQuantile result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.DoubleQuantile buildPartial() {
					WorldOuterClass.World.DoubleQuantile result = new WorldOuterClass.World.DoubleQuantile(this);
					int from_bitField0_ = bitField0_;
					int to_bitField0_ = 0;
					if(((from_bitField0_ & 0x00000001) == 0x00000001)) {
						to_bitField0_ |= 0x00000001;
					}
					result.key_ = key_;
					if(((from_bitField0_ & 0x00000002) == 0x00000002)) {
						to_bitField0_ |= 0x00000002;
					}
					result.value_ = value_;
					result.bitField0_ = to_bitField0_;
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					key_ = 0;
					bitField0_ = (bitField0_ & ~0x00000001);
					value_ = 0D;
					bitField0_ = (bitField0_ & ~0x00000002);
					return this;
				}
				/**
				 * <code>required int32 key = 1;</code>
				 */
				public Builder clearKey() {
					bitField0_ = (bitField0_ & ~0x00000001);
					key_ = 0;
					onChanged();
					return this;
				}
				/**
				 * <code>required double value = 2;</code>
				 */
				public Builder clearValue() {
					bitField0_ = (bitField0_ & ~0x00000002);
					value_ = 0D;
					onChanged();
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				public WorldOuterClass.World.DoubleQuantile getDefaultInstanceForType() {
					return WorldOuterClass.World.DoubleQuantile.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_DoubleQuantile_descriptor;
				}
				/**
				 * <code>required int32 key = 1;</code>
				 */
				public int getKey() {
					return key_;
				}
				/**
				 * <code>required int32 key = 1;</code>
				 */
				public Builder setKey(int value) {
					bitField0_ |= 0x00000001;
					key_ = value;
					onChanged();
					return this;
				}
				/**
				 * <code>required double value = 2;</code>
				 */
				public double getValue() {
					return value_;
				}
				/**
				 * <code>required double value = 2;</code>
				 */
				public Builder setValue(double value) {
					bitField0_ |= 0x00000002;
					value_ = value;
					onChanged();
					return this;
				}
				/**
				 * <code>required int32 key = 1;</code>
				 */
				public boolean hasKey() {
					return ((bitField0_ & 0x00000001) == 0x00000001);
				}
				/**
				 * <code>required double value = 2;</code>
				 */
				public boolean hasValue() {
					return ((bitField0_ & 0x00000002) == 0x00000002);
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_DoubleQuantile_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleQuantile.class, WorldOuterClass.World.DoubleQuantile.Builder.class);
				}
				public final boolean isInitialized() {
					if(!hasKey()) {
						
						return false;
					}
					return hasValue();
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.DoubleQuantile) {
						return mergeFrom((WorldOuterClass.World.DoubleQuantile) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.DoubleQuantile other) {
					if(other == WorldOuterClass.World.DoubleQuantile.getDefaultInstance()) {
						return this;
					}
					if(other.hasKey()) {
						setKey(other.getKey());
					}
					if(other.hasValue()) {
						setValue(other.getValue());
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.DoubleQuantile parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.DoubleQuantile) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.DoubleQuantile)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.DoubleQuantile)
		}
		
		/**
		 * Protobuf type {@code World.World.DoubleRow}
		 */
		public static final class DoubleRow extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.DoubleRow)
				DoubleRowOrBuilder {
			public static final int CELLS_FIELD_NUMBER = 1;
			private static final DoubleRow defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<DoubleRow> PARSER = new AbstractParser<DoubleRow>() {
				public DoubleRow parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new DoubleRow(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new DoubleRow(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<java.lang.Double> cells_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use DoubleRow.newBuilder() to construct.
			private DoubleRow(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private DoubleRow(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private DoubleRow(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 9: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									cells_ = new java.util.ArrayList<java.lang.Double>();
									mutable_bitField0_ |= 0x00000001;
								}
								cells_.add(input.readDouble());
								break;
							}
							case 10: {
								int length = input.readRawVarint32();
								int limit = input.pushLimit(length);
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
									cells_ = new java.util.ArrayList<java.lang.Double>();
									mutable_bitField0_ |= 0x00000001;
								}
								while(input.getBytesUntilLimit() > 0) {
									cells_.add(input.readDouble());
								}
								input.popLimit(limit);
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static DoubleRow getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_DoubleRow_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.DoubleRow prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.DoubleRow parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.DoubleRow parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.DoubleRow parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			/**
			 * <code>repeated double cells = 1;</code>
			 */
			public double getCells(int index) {
				return cells_.get(index);
			}
			/**
			 * <code>repeated double cells = 1;</code>
			 */
			public int getCellsCount() {
				return cells_.size();
			}
			/**
			 * <code>repeated double cells = 1;</code>
			 */
			public java.util.List<java.lang.Double> getCellsList() {
				return cells_;
			}
			public DoubleRow getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<DoubleRow> getParserForType() {
				return PARSER;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				{
					int dataSize = 0;
					dataSize = 8 * getCellsList().size();
					size += dataSize;
					size += 1 * getCellsList().size();
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				cells_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_DoubleRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleRow.class, WorldOuterClass.World.DoubleRow.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < cells_.size(); i++) {
					output.writeDouble(1, cells_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.DoubleRow}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.DoubleRow)
					WorldOuterClass.World.DoubleRowOrBuilder {
				private int bitField0_;
				private java.util.List<java.lang.Double> cells_ = java.util.Collections.emptyList();
				// Construct using WorldOuterClass.World.DoubleRow.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_DoubleRow_descriptor;
				}
				/**
				 * <code>repeated double cells = 1;</code>
				 */
				public Builder addAllCells(java.lang.Iterable<? extends java.lang.Double> values) {
					ensureCellsIsMutable();
					AbstractMessageLite.Builder.addAll(values, cells_);
					onChanged();
					return this;
				}
				/**
				 * <code>repeated double cells = 1;</code>
				 */
				public Builder addCells(double value) {
					ensureCellsIsMutable();
					cells_.add(value);
					onChanged();
					return this;
				}
				public WorldOuterClass.World.DoubleRow build() {
					WorldOuterClass.World.DoubleRow result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.DoubleRow buildPartial() {
					WorldOuterClass.World.DoubleRow result = new WorldOuterClass.World.DoubleRow(this);
					int from_bitField0_ = bitField0_;
					if(((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
						bitField0_ = (bitField0_ & ~0x00000001);
					}
					result.cells_ = cells_;
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					return this;
				}
				/**
				 * <code>repeated double cells = 1;</code>
				 */
				public Builder clearCells() {
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					onChanged();
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureCellsIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = new java.util.ArrayList<java.lang.Double>(cells_);
						bitField0_ |= 0x00000001;
					}
				}
				/**
				 * <code>repeated double cells = 1;</code>
				 */
				public double getCells(int index) {
					return cells_.get(index);
				}
				/**
				 * <code>repeated double cells = 1;</code>
				 */
				public int getCellsCount() {
					return cells_.size();
				}
				/**
				 * <code>repeated double cells = 1;</code>
				 */
				public java.util.List<java.lang.Double> getCellsList() {
					return java.util.Collections.unmodifiableList(cells_);
				}
				public WorldOuterClass.World.DoubleRow getDefaultInstanceForType() {
					return WorldOuterClass.World.DoubleRow.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_DoubleRow_descriptor;
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_DoubleRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.DoubleRow.class, WorldOuterClass.World.DoubleRow.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.DoubleRow) {
						return mergeFrom((WorldOuterClass.World.DoubleRow) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.DoubleRow other) {
					if(other == WorldOuterClass.World.DoubleRow.getDefaultInstance()) {
						return this;
					}
					if(!other.cells_.isEmpty()) {
						if(cells_.isEmpty()) {
							cells_ = other.cells_;
							bitField0_ = (bitField0_ & ~0x00000001);
						} else {
							ensureCellsIsMutable();
							cells_.addAll(other.cells_);
						}
						onChanged();
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.DoubleRow parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.DoubleRow) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated double cells = 1;</code>
				 */
				public Builder setCells(int index, double value) {
					ensureCellsIsMutable();
					cells_.set(index, value);
					onChanged();
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.DoubleRow)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.DoubleRow)
		}
		
		/**
		 * Protobuf type {@code World.World.GenerationData}
		 */
		public static final class GenerationData extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.GenerationData)
				GenerationDataOrBuilder {
			public static final int SEED_FIELD_NUMBER = 1;
			public static final int N_PLATES_FIELD_NUMBER = 2;
			public static final int OCEAN_LEVEL_FIELD_NUMBER = 3;
			public static final int STEP_FIELD_NUMBER = 4;
			private static final GenerationData defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<GenerationData> PARSER = new AbstractParser<GenerationData>() {
				public GenerationData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new GenerationData(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new GenerationData(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private int bitField0_;
			private int seed_;
			private int nPlates_;
			private float oceanLevel_;
			private java.lang.Object step_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use GenerationData.newBuilder() to construct.
			private GenerationData(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private GenerationData(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private GenerationData(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 8: {
								bitField0_ |= 0x00000001;
								seed_ = input.readInt32();
								break;
							}
							case 16: {
								bitField0_ |= 0x00000002;
								nPlates_ = input.readInt32();
								break;
							}
							case 29: {
								bitField0_ |= 0x00000004;
								oceanLevel_ = input.readFloat();
								break;
							}
							case 34: {
								ByteString bs = input.readBytes();
								bitField0_ |= 0x00000008;
								step_ = bs;
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static GenerationData getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_GenerationData_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.GenerationData prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.GenerationData parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.GenerationData parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.GenerationData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public GenerationData getDefaultInstanceForType() {
				return defaultInstance;
			}
			/**
			 * <code>optional int32 n_plates = 2;</code>
			 */
			public int getNPlates() {
				return nPlates_;
			}
			/**
			 * <code>optional float ocean_level = 3;</code>
			 */
			public float getOceanLevel() {
				return oceanLevel_;
			}
			@java.lang.Override
			public Parser<GenerationData> getParserForType() {
				return PARSER;
			}
			/**
			 * <code>optional int32 seed = 1;</code>
			 */
			public int getSeed() {
				return seed_;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				if(((bitField0_ & 0x00000001) == 0x00000001)) {
					size += CodedOutputStream.computeInt32Size(1, seed_);
				}
				if(((bitField0_ & 0x00000002) == 0x00000002)) {
					size += CodedOutputStream.computeInt32Size(2, nPlates_);
				}
				if(((bitField0_ & 0x00000004) == 0x00000004)) {
					size += CodedOutputStream.computeFloatSize(3, oceanLevel_);
				}
				if(((bitField0_ & 0x00000008) == 0x00000008)) {
					size += CodedOutputStream.computeBytesSize(4, getStepBytes());
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			/**
			 * <code>optional string step = 4;</code>
			 */
			public java.lang.String getStep() {
				java.lang.Object ref = step_;
				if(ref instanceof java.lang.String) {
					return (java.lang.String) ref;
				} else {
					ByteString bs = (ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if(bs.isValidUtf8()) {
						step_ = s;
					}
					return s;
				}
			}
			/**
			 * <code>optional string step = 4;</code>
			 */
			public ByteString getStepBytes() {
				java.lang.Object ref = step_;
				if(ref instanceof java.lang.String) {
					ByteString b = ByteString.copyFromUtf8((java.lang.String) ref);
					step_ = b;
					return b;
				} else {
					return (ByteString) ref;
				}
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			/**
			 * <code>optional int32 n_plates = 2;</code>
			 */
			public boolean hasNPlates() {
				return ((bitField0_ & 0x00000002) == 0x00000002);
			}
			/**
			 * <code>optional float ocean_level = 3;</code>
			 */
			public boolean hasOceanLevel() {
				return ((bitField0_ & 0x00000004) == 0x00000004);
			}
			/**
			 * <code>optional int32 seed = 1;</code>
			 */
			public boolean hasSeed() {
				return ((bitField0_ & 0x00000001) == 0x00000001);
			}
			/**
			 * <code>optional string step = 4;</code>
			 */
			public boolean hasStep() {
				return ((bitField0_ & 0x00000008) == 0x00000008);
			}
			private void initFields() {
				seed_ = 0;
				nPlates_ = 0;
				oceanLevel_ = 0F;
				step_ = "";
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_GenerationData_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.GenerationData.class, WorldOuterClass.World.GenerationData.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				if(((bitField0_ & 0x00000001) == 0x00000001)) {
					output.writeInt32(1, seed_);
				}
				if(((bitField0_ & 0x00000002) == 0x00000002)) {
					output.writeInt32(2, nPlates_);
				}
				if(((bitField0_ & 0x00000004) == 0x00000004)) {
					output.writeFloat(3, oceanLevel_);
				}
				if(((bitField0_ & 0x00000008) == 0x00000008)) {
					output.writeBytes(4, getStepBytes());
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.GenerationData}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.GenerationData)
					WorldOuterClass.World.GenerationDataOrBuilder {
				private int bitField0_;
				private int seed_;
				private int nPlates_;
				private float oceanLevel_;
				private java.lang.Object step_ = "";
				// Construct using WorldOuterClass.World.GenerationData.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_GenerationData_descriptor;
				}
				public WorldOuterClass.World.GenerationData build() {
					WorldOuterClass.World.GenerationData result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.GenerationData buildPartial() {
					WorldOuterClass.World.GenerationData result = new WorldOuterClass.World.GenerationData(this);
					int from_bitField0_ = bitField0_;
					int to_bitField0_ = 0;
					if(((from_bitField0_ & 0x00000001) == 0x00000001)) {
						to_bitField0_ |= 0x00000001;
					}
					result.seed_ = seed_;
					if(((from_bitField0_ & 0x00000002) == 0x00000002)) {
						to_bitField0_ |= 0x00000002;
					}
					result.nPlates_ = nPlates_;
					if(((from_bitField0_ & 0x00000004) == 0x00000004)) {
						to_bitField0_ |= 0x00000004;
					}
					result.oceanLevel_ = oceanLevel_;
					if(((from_bitField0_ & 0x00000008) == 0x00000008)) {
						to_bitField0_ |= 0x00000008;
					}
					result.step_ = step_;
					result.bitField0_ = to_bitField0_;
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					seed_ = 0;
					bitField0_ = (bitField0_ & ~0x00000001);
					nPlates_ = 0;
					bitField0_ = (bitField0_ & ~0x00000002);
					oceanLevel_ = 0F;
					bitField0_ = (bitField0_ & ~0x00000004);
					step_ = "";
					bitField0_ = (bitField0_ & ~0x00000008);
					return this;
				}
				/**
				 * <code>optional int32 n_plates = 2;</code>
				 */
				public Builder clearNPlates() {
					bitField0_ = (bitField0_ & ~0x00000002);
					nPlates_ = 0;
					onChanged();
					return this;
				}
				/**
				 * <code>optional float ocean_level = 3;</code>
				 */
				public Builder clearOceanLevel() {
					bitField0_ = (bitField0_ & ~0x00000004);
					oceanLevel_ = 0F;
					onChanged();
					return this;
				}
				/**
				 * <code>optional int32 seed = 1;</code>
				 */
				public Builder clearSeed() {
					bitField0_ = (bitField0_ & ~0x00000001);
					seed_ = 0;
					onChanged();
					return this;
				}
				/**
				 * <code>optional string step = 4;</code>
				 */
				public Builder clearStep() {
					bitField0_ = (bitField0_ & ~0x00000008);
					step_ = getDefaultInstance().getStep();
					onChanged();
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				public WorldOuterClass.World.GenerationData getDefaultInstanceForType() {
					return WorldOuterClass.World.GenerationData.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_GenerationData_descriptor;
				}
				/**
				 * <code>optional int32 n_plates = 2;</code>
				 */
				public int getNPlates() {
					return nPlates_;
				}
				/**
				 * <code>optional int32 n_plates = 2;</code>
				 */
				public Builder setNPlates(int value) {
					bitField0_ |= 0x00000002;
					nPlates_ = value;
					onChanged();
					return this;
				}
				/**
				 * <code>optional float ocean_level = 3;</code>
				 */
				public float getOceanLevel() {
					return oceanLevel_;
				}
				/**
				 * <code>optional float ocean_level = 3;</code>
				 */
				public Builder setOceanLevel(float value) {
					bitField0_ |= 0x00000004;
					oceanLevel_ = value;
					onChanged();
					return this;
				}
				/**
				 * <code>optional int32 seed = 1;</code>
				 */
				public int getSeed() {
					return seed_;
				}
				/**
				 * <code>optional int32 seed = 1;</code>
				 */
				public Builder setSeed(int value) {
					bitField0_ |= 0x00000001;
					seed_ = value;
					onChanged();
					return this;
				}
				/**
				 * <code>optional string step = 4;</code>
				 */
				public java.lang.String getStep() {
					java.lang.Object ref = step_;
					if(!(ref instanceof java.lang.String)) {
						ByteString bs = (ByteString) ref;
						java.lang.String s = bs.toStringUtf8();
						if(bs.isValidUtf8()) {
							step_ = s;
						}
						return s;
					} else {
						return (java.lang.String) ref;
					}
				}
				/**
				 * <code>optional string step = 4;</code>
				 */
				public Builder setStep(java.lang.String value) {
					if(value == null) {
						throw new NullPointerException();
					}
					bitField0_ |= 0x00000008;
					step_ = value;
					onChanged();
					return this;
				}
				/**
				 * <code>optional string step = 4;</code>
				 */
				public ByteString getStepBytes() {
					java.lang.Object ref = step_;
					if(ref instanceof String) {
						ByteString b = ByteString.copyFromUtf8((java.lang.String) ref);
						step_ = b;
						return b;
					} else {
						return (ByteString) ref;
					}
				}
				/**
				 * <code>optional string step = 4;</code>
				 */
				public Builder setStepBytes(ByteString value) {
					if(value == null) {
						throw new NullPointerException();
					}
					bitField0_ |= 0x00000008;
					step_ = value;
					onChanged();
					return this;
				}
				/**
				 * <code>optional int32 n_plates = 2;</code>
				 */
				public boolean hasNPlates() {
					return ((bitField0_ & 0x00000002) == 0x00000002);
				}
				/**
				 * <code>optional float ocean_level = 3;</code>
				 */
				public boolean hasOceanLevel() {
					return ((bitField0_ & 0x00000004) == 0x00000004);
				}
				/**
				 * <code>optional int32 seed = 1;</code>
				 */
				public boolean hasSeed() {
					return ((bitField0_ & 0x00000001) == 0x00000001);
				}
				/**
				 * <code>optional string step = 4;</code>
				 */
				public boolean hasStep() {
					return ((bitField0_ & 0x00000008) == 0x00000008);
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_GenerationData_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.GenerationData.class, WorldOuterClass.World.GenerationData.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.GenerationData) {
						return mergeFrom((WorldOuterClass.World.GenerationData) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.GenerationData other) {
					if(other == WorldOuterClass.World.GenerationData.getDefaultInstance()) {
						return this;
					}
					if(other.hasSeed()) {
						setSeed(other.getSeed());
					}
					if(other.hasNPlates()) {
						setNPlates(other.getNPlates());
					}
					if(other.hasOceanLevel()) {
						setOceanLevel(other.getOceanLevel());
					}
					if(other.hasStep()) {
						bitField0_ |= 0x00000008;
						step_ = other.step_;
						onChanged();
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.GenerationData parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.GenerationData) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.GenerationData)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.GenerationData)
		}
		
		/**
		 * Protobuf type {@code World.World.IntegerMatrix}
		 */
		public static final class IntegerMatrix extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.IntegerMatrix)
				IntegerMatrixOrBuilder {
			public static final int ROWS_FIELD_NUMBER = 1;
			private static final IntegerMatrix defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<IntegerMatrix> PARSER = new AbstractParser<IntegerMatrix>() {
				public IntegerMatrix parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new IntegerMatrix(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new IntegerMatrix(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<WorldOuterClass.World.IntegerRow> rows_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use IntegerMatrix.newBuilder() to construct.
			private IntegerMatrix(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private IntegerMatrix(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private IntegerMatrix(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 10: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									rows_ = new java.util.ArrayList<WorldOuterClass.World.IntegerRow>();
									mutable_bitField0_ |= 0x00000001;
								}
								rows_.add(input.readMessage(WorldOuterClass.World.IntegerRow.PARSER, extensionRegistry));
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						rows_ = java.util.Collections.unmodifiableList(rows_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static IntegerMatrix getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_IntegerMatrix_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.IntegerMatrix prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.IntegerMatrix parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.IntegerMatrix parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.IntegerMatrix parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public IntegerMatrix getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<IntegerMatrix> getParserForType() {
				return PARSER;
			}
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			public WorldOuterClass.World.IntegerRow getRows(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			public int getRowsCount() {
				return rows_.size();
			}
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			public java.util.List<WorldOuterClass.World.IntegerRow> getRowsList() {
				return rows_;
			}
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			public WorldOuterClass.World.IntegerRowOrBuilder getRowsOrBuilder(int index) {
				return rows_.get(index);
			}
			/**
			 * <code>repeated .World.World.IntegerRow rows = 1;</code>
			 */
			public java.util.List<? extends WorldOuterClass.World.IntegerRowOrBuilder> getRowsOrBuilderList() {
				return rows_;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				for(int i = 0; i < rows_.size(); i++) {
					size += CodedOutputStream.computeMessageSize(1, rows_.get(i));
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				rows_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_IntegerMatrix_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.IntegerMatrix.class, WorldOuterClass.World.IntegerMatrix.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < rows_.size(); i++) {
					output.writeMessage(1, rows_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.IntegerMatrix}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.IntegerMatrix)
					WorldOuterClass.World.IntegerMatrixOrBuilder {
				private int bitField0_;
				private java.util.List<WorldOuterClass.World.IntegerRow> rows_ = java.util.Collections.emptyList();
				private RepeatedFieldBuilder<WorldOuterClass.World.IntegerRow, WorldOuterClass.World.IntegerRow.Builder, WorldOuterClass.World.IntegerRowOrBuilder> rowsBuilder_;
				// Construct using WorldOuterClass.World.IntegerMatrix.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_IntegerMatrix_descriptor;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder addAllRows(java.lang.Iterable<? extends WorldOuterClass.World.IntegerRow> values) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						AbstractMessageLite.Builder.addAll(values, rows_);
						onChanged();
					} else {
						rowsBuilder_.addAllMessages(values);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder addRows(WorldOuterClass.World.IntegerRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.IntegerRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.add(index, value);
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder addRows(WorldOuterClass.World.IntegerRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder addRows(int index, WorldOuterClass.World.IntegerRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.add(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.addMessage(index, builderForValue.build());
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public WorldOuterClass.World.IntegerRow.Builder addRowsBuilder() {
					return getRowsFieldBuilder().addBuilder(WorldOuterClass.World.IntegerRow.getDefaultInstance());
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public WorldOuterClass.World.IntegerRow.Builder addRowsBuilder(int index) {
					return getRowsFieldBuilder().addBuilder(index, WorldOuterClass.World.IntegerRow.getDefaultInstance());
				}
				public WorldOuterClass.World.IntegerMatrix build() {
					WorldOuterClass.World.IntegerMatrix result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.IntegerMatrix buildPartial() {
					WorldOuterClass.World.IntegerMatrix result = new WorldOuterClass.World.IntegerMatrix(this);
					int from_bitField0_ = bitField0_;
					if(rowsBuilder_ == null) {
						if(((bitField0_ & 0x00000001) == 0x00000001)) {
							rows_ = java.util.Collections.unmodifiableList(rows_);
							bitField0_ = (bitField0_ & ~0x00000001);
						}
						result.rows_ = rows_;
					} else {
						result.rows_ = rowsBuilder_.build();
					}
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder clearRows() {
					if(rowsBuilder_ == null) {
						rows_ = java.util.Collections.emptyList();
						bitField0_ = (bitField0_ & ~0x00000001);
						onChanged();
					} else {
						rowsBuilder_.clear();
					}
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureRowsIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						rows_ = new java.util.ArrayList<WorldOuterClass.World.IntegerRow>(rows_);
						bitField0_ |= 0x00000001;
					}
				}
				public WorldOuterClass.World.IntegerMatrix getDefaultInstanceForType() {
					return WorldOuterClass.World.IntegerMatrix.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_IntegerMatrix_descriptor;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public WorldOuterClass.World.IntegerRow getRows(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessage(index);
					}
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public WorldOuterClass.World.IntegerRow.Builder getRowsBuilder(int index) {
					return getRowsFieldBuilder().getBuilder(index);
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.IntegerRow.Builder> getRowsBuilderList() {
					return getRowsFieldBuilder().getBuilderList();
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public int getRowsCount() {
					if(rowsBuilder_ == null) {
						return rows_.size();
					} else {
						return rowsBuilder_.getCount();
					}
				}
				private RepeatedFieldBuilder<WorldOuterClass.World.IntegerRow, WorldOuterClass.World.IntegerRow.Builder, WorldOuterClass.World.IntegerRowOrBuilder> getRowsFieldBuilder() {
					if(rowsBuilder_ == null) {
						rowsBuilder_ = new RepeatedFieldBuilder<WorldOuterClass.World.IntegerRow, WorldOuterClass.World.IntegerRow.Builder, WorldOuterClass.World.IntegerRowOrBuilder>(rows_, ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(), isClean());
						rows_ = null;
					}
					return rowsBuilder_;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public java.util.List<WorldOuterClass.World.IntegerRow> getRowsList() {
					if(rowsBuilder_ == null) {
						return java.util.Collections.unmodifiableList(rows_);
					} else {
						return rowsBuilder_.getMessageList();
					}
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public WorldOuterClass.World.IntegerRowOrBuilder getRowsOrBuilder(int index) {
					if(rowsBuilder_ == null) {
						return rows_.get(index);
					} else {
						return rowsBuilder_.getMessageOrBuilder(index);
					}
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public java.util.List<? extends WorldOuterClass.World.IntegerRowOrBuilder> getRowsOrBuilderList() {
					if(rowsBuilder_ != null) {
						return rowsBuilder_.getMessageOrBuilderList();
					} else {
						return java.util.Collections.unmodifiableList(rows_);
					}
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_IntegerMatrix_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.IntegerMatrix.class, WorldOuterClass.World.IntegerMatrix.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
						getRowsFieldBuilder();
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.IntegerMatrix) {
						return mergeFrom((WorldOuterClass.World.IntegerMatrix) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.IntegerMatrix other) {
					if(other == WorldOuterClass.World.IntegerMatrix.getDefaultInstance()) {
						return this;
					}
					if(rowsBuilder_ == null) {
						if(!other.rows_.isEmpty()) {
							if(rows_.isEmpty()) {
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000001);
							} else {
								ensureRowsIsMutable();
								rows_.addAll(other.rows_);
							}
							onChanged();
						}
					} else {
						if(!other.rows_.isEmpty()) {
							if(rowsBuilder_.isEmpty()) {
								rowsBuilder_.dispose();
								rowsBuilder_ = null;
								rows_ = other.rows_;
								bitField0_ = (bitField0_ & ~0x00000001);
								rowsBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? getRowsFieldBuilder() : null;
							} else {
								rowsBuilder_.addAllMessages(other.rows_);
							}
						}
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.IntegerMatrix parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.IntegerMatrix) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder removeRows(int index) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.remove(index);
						onChanged();
					} else {
						rowsBuilder_.remove(index);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.IntegerRow value) {
					if(rowsBuilder_ == null) {
						if(value == null) {
							throw new NullPointerException();
						}
						ensureRowsIsMutable();
						rows_.set(index, value);
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, value);
					}
					return this;
				}
				/**
				 * <code>repeated .World.World.IntegerRow rows = 1;</code>
				 */
				public Builder setRows(int index, WorldOuterClass.World.IntegerRow.Builder builderForValue) {
					if(rowsBuilder_ == null) {
						ensureRowsIsMutable();
						rows_.set(index, builderForValue.build());
						onChanged();
					} else {
						rowsBuilder_.setMessage(index, builderForValue.build());
					}
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.IntegerMatrix)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.IntegerMatrix)
		}
		
		/**
		 * Protobuf type {@code World.World.IntegerRow}
		 */
		public static final class IntegerRow extends GeneratedMessage implements
				// @@protoc_insertion_point(message_implements:World.World.IntegerRow)
				IntegerRowOrBuilder {
			public static final int CELLS_FIELD_NUMBER = 1;
			private static final IntegerRow defaultInstance;
			private static final long serialVersionUID = 0L;
			public static Parser<IntegerRow> PARSER = new AbstractParser<IntegerRow>() {
				public IntegerRow parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
					return new IntegerRow(input, extensionRegistry);
				}
			};
			static {
				defaultInstance = new IntegerRow(true);
				defaultInstance.initFields();
			}
			private final UnknownFieldSet unknownFields;
			private java.util.List<java.lang.Integer> cells_;
			private byte memoizedIsInitialized = -1;
			private int memoizedSerializedSize = -1;
			// Use IntegerRow.newBuilder() to construct.
			private IntegerRow(GeneratedMessage.Builder<?> builder) {
				super(builder);
				this.unknownFields = builder.getUnknownFields();
			}
			private IntegerRow(boolean noInit) {
				this.unknownFields = UnknownFieldSet.getDefaultInstance();
			}
			private IntegerRow(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				initFields();
				int mutable_bitField0_ = 0;
				UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
				try {
					boolean done = false;
					while(!done) {
						int tag = input.readTag();
						switch(tag) {
							case 0:
								done = true;
								break;
							default: {
								if(!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
									done = true;
								}
								break;
							}
							case 8: {
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
									cells_ = new java.util.ArrayList<java.lang.Integer>();
									mutable_bitField0_ |= 0x00000001;
								}
								cells_.add(input.readInt32());
								break;
							}
							case 10: {
								int length = input.readRawVarint32();
								int limit = input.pushLimit(length);
								if(!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
									cells_ = new java.util.ArrayList<java.lang.Integer>();
									mutable_bitField0_ |= 0x00000001;
								}
								while(input.getBytesUntilLimit() > 0) {
									cells_.add(input.readInt32());
								}
								input.popLimit(limit);
								break;
							}
						}
					}
				} catch (InvalidProtocolBufferException e) {
					throw e.setUnfinishedMessage(this);
				} catch (java.io.IOException e) {
					throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
				} finally {
					if(((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
					}
					this.unknownFields = unknownFields.build();
					makeExtensionsImmutable();
				}
			}
			public static IntegerRow getDefaultInstance() {
				return defaultInstance;
			}
			public static final Descriptors.Descriptor getDescriptor() {
				return WorldOuterClass.internal_static_World_World_IntegerRow_descriptor;
			}
			public static Builder newBuilder() {
				return Builder.create();
			}
			public static Builder newBuilder(WorldOuterClass.World.IntegerRow prototype) {
				return newBuilder().mergeFrom(prototype);
			}
			public static WorldOuterClass.World.IntegerRow parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input);
			}
			public static WorldOuterClass.World.IntegerRow parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseDelimitedFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(ByteString data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(byte[] data) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
				return PARSER.parseFrom(data, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(java.io.InputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(CodedInputStream input) throws java.io.IOException {
				return PARSER.parseFrom(input);
			}
			public static WorldOuterClass.World.IntegerRow parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				return PARSER.parseFrom(input, extensionRegistry);
			}
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			public int getCells(int index) {
				return cells_.get(index);
			}
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			public int getCellsCount() {
				return cells_.size();
			}
			/**
			 * <code>repeated int32 cells = 1;</code>
			 */
			public java.util.List<java.lang.Integer> getCellsList() {
				return cells_;
			}
			public IntegerRow getDefaultInstanceForType() {
				return defaultInstance;
			}
			@java.lang.Override
			public Parser<IntegerRow> getParserForType() {
				return PARSER;
			}
			public int getSerializedSize() {
				int size = memoizedSerializedSize;
				if(size != -1) {
					return size;
				}
				
				size = 0;
				{
					int dataSize = 0;
					for(int i = 0; i < cells_.size(); i++) {
						dataSize += CodedOutputStream.computeInt32SizeNoTag(cells_.get(i));
					}
					size += dataSize;
					size += 1 * getCellsList().size();
				}
				size += getUnknownFields().getSerializedSize();
				memoizedSerializedSize = size;
				return size;
			}
			@java.lang.Override
			public final UnknownFieldSet getUnknownFields() {
				return this.unknownFields;
			}
			private void initFields() {
				cells_ = java.util.Collections.emptyList();
			}
			protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
				return WorldOuterClass.internal_static_World_World_IntegerRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.IntegerRow.class, WorldOuterClass.World.IntegerRow.Builder.class);
			}
			public final boolean isInitialized() {
				byte isInitialized = memoizedIsInitialized;
				if(isInitialized == 1) {
					return true;
				}
				if(isInitialized == 0) {
					return false;
				}
				
				memoizedIsInitialized = 1;
				return true;
			}
			public Builder newBuilderForType() {
				return newBuilder();
			}
			@java.lang.Override
			protected Builder newBuilderForType(GeneratedMessage.BuilderParent parent) {
				Builder builder = new Builder(parent);
				return builder;
			}
			public Builder toBuilder() {
				return newBuilder(this);
			}
			@java.lang.Override
			protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
				return super.writeReplace();
			}
			public void writeTo(CodedOutputStream output) throws java.io.IOException {
				getSerializedSize();
				for(int i = 0; i < cells_.size(); i++) {
					output.writeInt32(1, cells_.get(i));
				}
				getUnknownFields().writeTo(output);
			}
			/**
			 * Protobuf type {@code World.World.IntegerRow}
			 */
			public static final class Builder extends GeneratedMessage.Builder<Builder> implements
					// @@protoc_insertion_point(builder_implements:World.World.IntegerRow)
					WorldOuterClass.World.IntegerRowOrBuilder {
				private int bitField0_;
				private java.util.List<java.lang.Integer> cells_ = java.util.Collections.emptyList();
				// Construct using WorldOuterClass.World.IntegerRow.newBuilder()
				private Builder() {
					maybeForceBuilderInitialization();
				}
				private Builder(GeneratedMessage.BuilderParent parent) {
					super(parent);
					maybeForceBuilderInitialization();
				}
				private static Builder create() {
					return new Builder();
				}
				public static final Descriptors.Descriptor getDescriptor() {
					return WorldOuterClass.internal_static_World_World_IntegerRow_descriptor;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder addAllCells(java.lang.Iterable<? extends java.lang.Integer> values) {
					ensureCellsIsMutable();
					AbstractMessageLite.Builder.addAll(values, cells_);
					onChanged();
					return this;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder addCells(int value) {
					ensureCellsIsMutable();
					cells_.add(value);
					onChanged();
					return this;
				}
				public WorldOuterClass.World.IntegerRow build() {
					WorldOuterClass.World.IntegerRow result = buildPartial();
					if(!result.isInitialized()) {
						throw newUninitializedMessageException(result);
					}
					return result;
				}
				public WorldOuterClass.World.IntegerRow buildPartial() {
					WorldOuterClass.World.IntegerRow result = new WorldOuterClass.World.IntegerRow(this);
					int from_bitField0_ = bitField0_;
					if(((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = java.util.Collections.unmodifiableList(cells_);
						bitField0_ = (bitField0_ & ~0x00000001);
					}
					result.cells_ = cells_;
					onBuilt();
					return result;
				}
				public Builder clear() {
					super.clear();
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					return this;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder clearCells() {
					cells_ = java.util.Collections.emptyList();
					bitField0_ = (bitField0_ & ~0x00000001);
					onChanged();
					return this;
				}
				public Builder clone() {
					return create().mergeFrom(buildPartial());
				}
				private void ensureCellsIsMutable() {
					if(!((bitField0_ & 0x00000001) == 0x00000001)) {
						cells_ = new java.util.ArrayList<java.lang.Integer>(cells_);
						bitField0_ |= 0x00000001;
					}
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public int getCells(int index) {
					return cells_.get(index);
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public int getCellsCount() {
					return cells_.size();
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public java.util.List<java.lang.Integer> getCellsList() {
					return java.util.Collections.unmodifiableList(cells_);
				}
				public WorldOuterClass.World.IntegerRow getDefaultInstanceForType() {
					return WorldOuterClass.World.IntegerRow.getDefaultInstance();
				}
				public Descriptors.Descriptor getDescriptorForType() {
					return WorldOuterClass.internal_static_World_World_IntegerRow_descriptor;
				}
				protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
					return WorldOuterClass.internal_static_World_World_IntegerRow_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldOuterClass.World.IntegerRow.class, WorldOuterClass.World.IntegerRow.Builder.class);
				}
				public final boolean isInitialized() {
					return true;
				}
				private void maybeForceBuilderInitialization() {
					if(GeneratedMessage.alwaysUseFieldBuilders) {
					}
				}
				public Builder mergeFrom(Message other) {
					if(other instanceof WorldOuterClass.World.IntegerRow) {
						return mergeFrom((WorldOuterClass.World.IntegerRow) other);
					} else {
						super.mergeFrom(other);
						return this;
					}
				}
				public Builder mergeFrom(WorldOuterClass.World.IntegerRow other) {
					if(other == WorldOuterClass.World.IntegerRow.getDefaultInstance()) {
						return this;
					}
					if(!other.cells_.isEmpty()) {
						if(cells_.isEmpty()) {
							cells_ = other.cells_;
							bitField0_ = (bitField0_ & ~0x00000001);
						} else {
							ensureCellsIsMutable();
							cells_.addAll(other.cells_);
						}
						onChanged();
					}
					this.mergeUnknownFields(other.getUnknownFields());
					return this;
				}
				public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
					WorldOuterClass.World.IntegerRow parsedMessage = null;
					try {
						parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
					} catch (InvalidProtocolBufferException e) {
						parsedMessage = (WorldOuterClass.World.IntegerRow) e.getUnfinishedMessage();
						throw e;
					} finally {
						if(parsedMessage != null) {
							mergeFrom(parsedMessage);
						}
					}
					return this;
				}
				/**
				 * <code>repeated int32 cells = 1;</code>
				 */
				public Builder setCells(int index, int value) {
					ensureCellsIsMutable();
					cells_.set(index, value);
					onChanged();
					return this;
				}
				
				// @@protoc_insertion_point(builder_scope:World.World.IntegerRow)
			}
			
			// @@protoc_insertion_point(class_scope:World.World.IntegerRow)
		}
		
		// @@protoc_insertion_point(class_scope:World.World)
	}
	
	// @@protoc_insertion_point(outer_class_scope)
}
